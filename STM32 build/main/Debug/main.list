
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d4  080042d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  0800434c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  0800434c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000758c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014db  00000000  00000000  0002762c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  00029238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001531c  00000000  00000000  000298b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006265  00000000  00000000  0003ebcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087b28  00000000  00000000  00044e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c8  00000000  00000000  000cc9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004218 	.word	0x08004218

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004218 	.word	0x08004218

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0b6      	sub	sp, #216	; 0xd8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  myqueue humid, light, temperature;
  uint32_t inAutoPumpOn = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t inAutoLightOn = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t analog_humid = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t analog_light = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint32_t analog_temperature = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t calibrated_humid = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t calibrated_light = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t calibrated_temperature = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f000 fde9 	bl	8001978 <HAL_Init>

  /* USER CODE BEGIN Init */
  Init_MyQueue(&humid);
 8000da6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fb30 	bl	8001410 <Init_MyQueue>
  Init_MyQueue(&light);
 8000db0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fb2b 	bl	8001410 <Init_MyQueue>
  Init_MyQueue(&temperature);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fb27 	bl	8001410 <Init_MyQueue>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f97b 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 faa7 	bl	8001318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 fa7b 	bl	80012c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000dce:	f000 f9df 	bl	8001190 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000dd2:	f000 fa4d 	bl	8001270 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000dd6:	48af      	ldr	r0, [pc, #700]	; (8001094 <main+0x328>)
 8000dd8:	f000 fea6 	bl	8001b28 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 1);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	48ad      	ldr	r0, [pc, #692]	; (8001094 <main+0x328>)
 8000de0:	f000 ff7b 	bl	8001cda <HAL_ADC_PollForConversion>
	analog_humid = HAL_ADC_GetValue(&hadc1);
 8000de4:	48ab      	ldr	r0, [pc, #684]	; (8001094 <main+0x328>)
 8000de6:	f000 fffc 	bl	8001de2 <HAL_ADC_GetValue>
 8000dea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	HAL_ADC_PollForConversion(&hadc1, 1);
 8000dee:	2101      	movs	r1, #1
 8000df0:	48a8      	ldr	r0, [pc, #672]	; (8001094 <main+0x328>)
 8000df2:	f000 ff72 	bl	8001cda <HAL_ADC_PollForConversion>
	analog_light = HAL_ADC_GetValue(&hadc1);
 8000df6:	48a7      	ldr	r0, [pc, #668]	; (8001094 <main+0x328>)
 8000df8:	f000 fff3 	bl	8001de2 <HAL_ADC_GetValue>
 8000dfc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	HAL_ADC_PollForConversion(&hadc1, 1);
 8000e00:	2101      	movs	r1, #1
 8000e02:	48a4      	ldr	r0, [pc, #656]	; (8001094 <main+0x328>)
 8000e04:	f000 ff69 	bl	8001cda <HAL_ADC_PollForConversion>
	analog_temperature = HAL_ADC_GetValue(&hadc1);
 8000e08:	48a2      	ldr	r0, [pc, #648]	; (8001094 <main+0x328>)
 8000e0a:	f000 ffea 	bl	8001de2 <HAL_ADC_GetValue>
 8000e0e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

	HAL_ADC_Stop(&hadc1);
 8000e12:	48a0      	ldr	r0, [pc, #640]	; (8001094 <main+0x328>)
 8000e14:	f000 ff2e 	bl	8001c74 <HAL_ADC_Stop>


	Myqueue_Add(&humid, analog_humid);
 8000e18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e1c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fb0e 	bl	8001442 <Myqueue_Add>
	Myqueue_Add(&light, analog_light);
 8000e26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e2a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb07 	bl	8001442 <Myqueue_Add>
	Myqueue_Add(&temperature, analog_temperature);
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fb01 	bl	8001442 <Myqueue_Add>


	calibrated_humid = Humid_Calibrate(Myqueue_GetAvg(&humid));
 8000e40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fb56 	bl	80014f6 <Myqueue_GetAvg>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fb5e 	bl	800150e <Humid_Calibrate>
 8000e52:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	calibrated_light = Light_Calibrate(Myqueue_GetAvg(&light));
 8000e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fb4b 	bl	80014f6 <Myqueue_GetAvg>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fb7c 	bl	8001560 <Light_Calibrate>
 8000e68:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	calibrated_temperature = Temperature_Calibrate(Myqueue_GetAvg(&temperature));
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fb41 	bl	80014f6 <Myqueue_GetAvg>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fb9e 	bl	80015b8 <Temperature_Calibrate>
 8000e7c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
//	calibrated_humid = Myqueue_GetAvg(&humid);
//	calibrated_light = Myqueue_GetAvg(&light);
//	calibrated_temperature = Myqueue_GetAvg(&temperature);


	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) { //in Auto Pump Mode
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	4884      	ldr	r0, [pc, #528]	; (8001098 <main+0x32c>)
 8000e86:	f001 fc4f 	bl	8002728 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <main+0x130>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//Auto mode LED on
 8000e90:	2200      	movs	r2, #0
 8000e92:	2120      	movs	r1, #32
 8000e94:	4880      	ldr	r0, [pc, #512]	; (8001098 <main+0x32c>)
 8000e96:	f001 fc5f 	bl	8002758 <HAL_GPIO_WritePin>
 8000e9a:	e004      	b.n	8000ea6 <main+0x13a>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//Auto mode LED off
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	487d      	ldr	r0, [pc, #500]	; (8001098 <main+0x32c>)
 8000ea2:	f001 fc59 	bl	8002758 <HAL_GPIO_WritePin>
//	} else {
//		sprintf(buffer, "PIN_12_SET\n\r");
//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
//	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) {//if force Pump on
 8000ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eaa:	487b      	ldr	r0, [pc, #492]	; (8001098 <main+0x32c>)
 8000eac:	f001 fc3c 	bl	8002728 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d105      	bne.n	8000ec2 <main+0x156>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);// Pump on
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	4877      	ldr	r0, [pc, #476]	; (8001098 <main+0x32c>)
 8000ebc:	f001 fc4c 	bl	8002758 <HAL_GPIO_WritePin>
 8000ec0:	e032      	b.n	8000f28 <main+0x1bc>
	} else {
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) { //in Auto Pump Mode
 8000ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec6:	4874      	ldr	r0, [pc, #464]	; (8001098 <main+0x32c>)
 8000ec8:	f001 fc2e 	bl	8002728 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d125      	bne.n	8000f1e <main+0x1b2>
			if ((inAutoPumpOn == 1) || (calibrated_humid <= AUTO_MIN_HUMID_PUMP_ON)) {
 8000ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d003      	beq.n	8000ee2 <main+0x176>
 8000eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ede:	2b1e      	cmp	r3, #30
 8000ee0:	d814      	bhi.n	8000f0c <main+0x1a0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);// Pump on
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	486c      	ldr	r0, [pc, #432]	; (8001098 <main+0x32c>)
 8000ee8:	f001 fc36 	bl	8002758 <HAL_GPIO_WritePin>
				inAutoPumpOn = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				if (calibrated_humid >= AUTO_MAX_HUMID_PUMP_OFF) {
 8000ef2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ef6:	2b59      	cmp	r3, #89	; 0x59
 8000ef8:	d916      	bls.n	8000f28 <main+0x1bc>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);// Pump off
 8000efa:	2200      	movs	r2, #0
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4866      	ldr	r0, [pc, #408]	; (8001098 <main+0x32c>)
 8000f00:	f001 fc2a 	bl	8002758 <HAL_GPIO_WritePin>
					inAutoPumpOn = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				if (calibrated_humid >= AUTO_MAX_HUMID_PUMP_OFF) {
 8000f0a:	e00d      	b.n	8000f28 <main+0x1bc>
				}
			} else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);// Pump off
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4861      	ldr	r0, [pc, #388]	; (8001098 <main+0x32c>)
 8000f12:	f001 fc21 	bl	8002758 <HAL_GPIO_WritePin>
				inAutoPumpOn = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f1c:	e004      	b.n	8000f28 <main+0x1bc>
			}
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // force Pump off
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	485d      	ldr	r0, [pc, #372]	; (8001098 <main+0x32c>)
 8000f24:	f001 fc18 	bl	8002758 <HAL_GPIO_WritePin>
		}
	}


	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	485a      	ldr	r0, [pc, #360]	; (8001098 <main+0x32c>)
 8000f2e:	f001 fbfb 	bl	8002728 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <main+0x1d8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);// Lamp on
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4856      	ldr	r0, [pc, #344]	; (8001098 <main+0x32c>)
 8000f3e:	f001 fc0b 	bl	8002758 <HAL_GPIO_WritePin>
 8000f42:	e024      	b.n	8000f8e <main+0x222>
	} else {
		if ((inAutoLightOn == 1) || (calibrated_light <= AUTO_MIN_LIGHT_ON)) {//normally auto mode
 8000f44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d003      	beq.n	8000f54 <main+0x1e8>
 8000f4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f50:	2b19      	cmp	r3, #25
 8000f52:	d814      	bhi.n	8000f7e <main+0x212>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);// Lamp on
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	484f      	ldr	r0, [pc, #316]	; (8001098 <main+0x32c>)
 8000f5a:	f001 fbfd 	bl	8002758 <HAL_GPIO_WritePin>
			inAutoLightOn = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			if (calibrated_light >= AUTO_MAX_LIGHT_OFF) {
 8000f64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f68:	2b22      	cmp	r3, #34	; 0x22
 8000f6a:	d910      	bls.n	8000f8e <main+0x222>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);// Lamp off
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4849      	ldr	r0, [pc, #292]	; (8001098 <main+0x32c>)
 8000f72:	f001 fbf1 	bl	8002758 <HAL_GPIO_WritePin>
				inAutoLightOn = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			if (calibrated_light >= AUTO_MAX_LIGHT_OFF) {
 8000f7c:	e007      	b.n	8000f8e <main+0x222>
			}
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);// Lamp off
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4845      	ldr	r0, [pc, #276]	; (8001098 <main+0x32c>)
 8000f84:	f001 fbe8 	bl	8002758 <HAL_GPIO_WritePin>
			inAutoLightOn = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		}
	}


	sprintf(buffer, "start");
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <main+0x330>)
 8000f90:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <main+0x334>)
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6018      	str	r0, [r3, #0]
 8000f96:	8892      	ldrh	r2, [r2, #4]
 8000f98:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8000f9a:	4840      	ldr	r0, [pc, #256]	; (800109c <main+0x330>)
 8000f9c:	f7ff f920 	bl	80001e0 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	493c      	ldr	r1, [pc, #240]	; (800109c <main+0x330>)
 8000faa:	483e      	ldr	r0, [pc, #248]	; (80010a4 <main+0x338>)
 8000fac:	f002 f89d 	bl	80030ea <HAL_UART_Transmit>

	sprintf(buffer, "Percent Humid = %d\n\r",calibrated_humid);
 8000fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000fb4:	493c      	ldr	r1, [pc, #240]	; (80010a8 <main+0x33c>)
 8000fb6:	4839      	ldr	r0, [pc, #228]	; (800109c <main+0x330>)
 8000fb8:	f002 fd28 	bl	8003a0c <siprintf>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000fbc:	4837      	ldr	r0, [pc, #220]	; (800109c <main+0x330>)
 8000fbe:	f7ff f90f 	bl	80001e0 <strlen>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	4934      	ldr	r1, [pc, #208]	; (800109c <main+0x330>)
 8000fcc:	4837      	ldr	r0, [pc, #220]	; (80010ac <main+0x340>)
 8000fce:	f002 f88c 	bl	80030ea <HAL_UART_Transmit>
	sprintf(buffer, "%d",calibrated_humid);
 8000fd2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000fd6:	4936      	ldr	r1, [pc, #216]	; (80010b0 <main+0x344>)
 8000fd8:	4830      	ldr	r0, [pc, #192]	; (800109c <main+0x330>)
 8000fda:	f002 fd17 	bl	8003a0c <siprintf>
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8000fde:	482f      	ldr	r0, [pc, #188]	; (800109c <main+0x330>)
 8000fe0:	f7ff f8fe 	bl	80001e0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	492b      	ldr	r1, [pc, #172]	; (800109c <main+0x330>)
 8000fee:	482d      	ldr	r0, [pc, #180]	; (80010a4 <main+0x338>)
 8000ff0:	f002 f87b 	bl	80030ea <HAL_UART_Transmit>
	HAL_Delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f000 fd31 	bl	8001a5c <HAL_Delay>

	sprintf(buffer, "Percent Light = %d\n\r",calibrated_light);
 8000ffa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ffe:	492d      	ldr	r1, [pc, #180]	; (80010b4 <main+0x348>)
 8001000:	4826      	ldr	r0, [pc, #152]	; (800109c <main+0x330>)
 8001002:	f002 fd03 	bl	8003a0c <siprintf>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8001006:	4825      	ldr	r0, [pc, #148]	; (800109c <main+0x330>)
 8001008:	f7ff f8ea 	bl	80001e0 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	4921      	ldr	r1, [pc, #132]	; (800109c <main+0x330>)
 8001016:	4825      	ldr	r0, [pc, #148]	; (80010ac <main+0x340>)
 8001018:	f002 f867 	bl	80030ea <HAL_UART_Transmit>
	sprintf(buffer, "%d",calibrated_light);
 800101c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001020:	4923      	ldr	r1, [pc, #140]	; (80010b0 <main+0x344>)
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <main+0x330>)
 8001024:	f002 fcf2 	bl	8003a0c <siprintf>
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8001028:	481c      	ldr	r0, [pc, #112]	; (800109c <main+0x330>)
 800102a:	f7ff f8d9 	bl	80001e0 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	b29a      	uxth	r2, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	4919      	ldr	r1, [pc, #100]	; (800109c <main+0x330>)
 8001038:	481a      	ldr	r0, [pc, #104]	; (80010a4 <main+0x338>)
 800103a:	f002 f856 	bl	80030ea <HAL_UART_Transmit>
	HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f000 fd0c 	bl	8001a5c <HAL_Delay>

	sprintf(buffer, "Temperature = %d\n\r",calibrated_temperature);
 8001044:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001048:	491b      	ldr	r1, [pc, #108]	; (80010b8 <main+0x34c>)
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0x330>)
 800104c:	f002 fcde 	bl	8003a0c <siprintf>
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <main+0x330>)
 8001052:	f7ff f8c5 	bl	80001e0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	490f      	ldr	r1, [pc, #60]	; (800109c <main+0x330>)
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <main+0x340>)
 8001062:	f002 f842 	bl	80030ea <HAL_UART_Transmit>
	sprintf(buffer, "%d",calibrated_temperature);
 8001066:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800106a:	4911      	ldr	r1, [pc, #68]	; (80010b0 <main+0x344>)
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <main+0x330>)
 800106e:	f002 fccd 	bl	8003a0c <siprintf>
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <main+0x330>)
 8001074:	f7ff f8b4 	bl	80001e0 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	b29a      	uxth	r2, r3
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	4906      	ldr	r1, [pc, #24]	; (800109c <main+0x330>)
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <main+0x338>)
 8001084:	f002 f831 	bl	80030ea <HAL_UART_Transmit>

	//int tmp = temperature->mSum;
//	sprintf(buffer, "TemperatureSum = %d\n\r", tmp);
//	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
	HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f000 fce6 	bl	8001a5c <HAL_Delay>
  {
 8001090:	e6a1      	b.n	8000dd6 <main+0x6a>
 8001092:	bf00      	nop
 8001094:	20000098 	.word	0x20000098
 8001098:	40020000 	.word	0x40020000
 800109c:	20000120 	.word	0x20000120
 80010a0:	08004230 	.word	0x08004230
 80010a4:	200000e0 	.word	0x200000e0
 80010a8:	08004238 	.word	0x08004238
 80010ac:	20000154 	.word	0x20000154
 80010b0:	08004250 	.word	0x08004250
 80010b4:	08004254 	.word	0x08004254
 80010b8:	0800426c 	.word	0x0800426c

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	; 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fc96 	bl	80039fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <SystemClock_Config+0xcc>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <SystemClock_Config+0xcc>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <SystemClock_Config+0xcc>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <SystemClock_Config+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <SystemClock_Config+0xd0>)
 8001106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <SystemClock_Config+0xd0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001120:	2310      	movs	r3, #16
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001124:	2302      	movs	r3, #2
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800112c:	2310      	movs	r3, #16
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001130:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001136:	2304      	movs	r3, #4
 8001138:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800113a:	2304      	movs	r3, #4
 800113c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fb22 	bl	800278c <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800114e:	f000 fa87 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2302      	movs	r3, #2
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2102      	movs	r1, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fd7c 	bl	8002c6c <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800117a:	f000 fa71 	bl	8001660 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3750      	adds	r7, #80	; 0x50
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40007000 	.word	0x40007000

08001190 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011a4:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <MX_ADC1_Init+0xd4>)
 80011a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011be:	2201      	movs	r2, #1
 80011c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <MX_ADC1_Init+0xd8>)
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011de:	2203      	movs	r2, #3
 80011e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f0:	481b      	ldr	r0, [pc, #108]	; (8001260 <MX_ADC1_Init+0xd0>)
 80011f2:	f000 fc55 	bl	8001aa0 <HAL_ADC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011fc:	f000 fa30 	bl	8001660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001208:	2307      	movs	r3, #7
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_ADC1_Init+0xd0>)
 8001212:	f000 fdf3 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800121c:	f000 fa20 	bl	8001660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001220:	2301      	movs	r3, #1
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_ADC1_Init+0xd0>)
 800122e:	f000 fde5 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001238:	f000 fa12 	bl	8001660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_ADC1_Init+0xdc>)
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001240:	2303      	movs	r3, #3
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_ADC1_Init+0xd0>)
 800124a:	f000 fdd7 	bl	8001dfc <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001254:	f000 fa04 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000098 	.word	0x20000098
 8001264:	40012000 	.word	0x40012000
 8001268:	0f000001 	.word	0x0f000001
 800126c:	10000012 	.word	0x10000012

08001270 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <MX_USART1_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800127c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a8:	f001 fed2 	bl	8003050 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 f9d5 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000e0 	.word	0x200000e0
 80012c0:	40011000 	.word	0x40011000

080012c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <MX_USART2_UART_Init+0x50>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012fc:	f001 fea8 	bl	8003050 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001306:	f000 f9ab 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000154 	.word	0x20000154
 8001314:	40004400 	.word	0x40004400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a32      	ldr	r2, [pc, #200]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_GPIO_Init+0xe8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_GPIO_Init+0xe8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <MX_GPIO_Init+0xe8>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	21e0      	movs	r1, #224	; 0xe0
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_GPIO_Init+0xec>)
 80013a4:	f001 f9d8 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_GPIO_Init+0xf0>)
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <MX_GPIO_Init+0xf4>)
 80013be:	f001 f831 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80013c2:	23e0      	movs	r3, #224	; 0xe0
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <MX_GPIO_Init+0xec>)
 80013da:	f001 f823 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013de:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_GPIO_Init+0xec>)
 80013f4:	f001 f816 	bl	8002424 <HAL_GPIO_Init>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	10210000 	.word	0x10210000
 800140c:	40020800 	.word	0x40020800

08001410 <Init_MyQueue>:

/* USER CODE BEGIN 4 */
void Init_MyQueue(myqueue *q)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	q->mCap = QUEUE_CAPACITY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	220a      	movs	r2, #10
 800141c:	601a      	str	r2, [r3, #0]
	q->mSize = 0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
	q->mFront = 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
	q->mSum = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
	q->mAvg = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <Myqueue_Add>:
void Myqueue_Add(myqueue *q, uint32_t value)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
	if (q->mSize < q->mCap) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d21b      	bcs.n	8001490 <Myqueue_Add+0x4e>
		q->mData[q->mSize] = value;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	3302      	adds	r3, #2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	605a      	str	r2, [r3, #4]
		q->mSize += 1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	605a      	str	r2, [r3, #4]
		q->mSum += value;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	441a      	add	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
		q->mAvg = (q->mSum) / (q->mSize);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	fbb2 f2f3 	udiv	r2, r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 800148e:	e02d      	b.n	80014ec <Myqueue_Add+0xaa>
	}
	q->mSum -= q->mData[q->mFront];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	3302      	adds	r3, #2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	1ad2      	subs	r2, r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
	q->mSum += value;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	441a      	add	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
	q->mData[q->mFront] = value;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	3302      	adds	r3, #2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	605a      	str	r2, [r3, #4]
	q->mFront = (q->mFront + 1) % (q->mCap);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d2:	fb02 f201 	mul.w	r2, r2, r1
 80014d6:	1a9a      	subs	r2, r3, r2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
	q->mAvg = (q->mSum) / (q->mCap);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <Myqueue_GetAvg>:
uint32_t Myqueue_GetAvg(myqueue *q)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	return q->mAvg;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <Humid_Calibrate>:
uint32_t Humid_Calibrate(uint32_t value)
{
 800150e:	b480      	push	{r7}
 8001510:	b087      	sub	sp, #28
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	uint32_t max = 3700;
 8001516:	f640 6374 	movw	r3, #3700	; 0xe74
 800151a:	617b      	str	r3, [r7, #20]
	uint32_t min = 3300;
 800151c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001520:	613b      	str	r3, [r7, #16]
	uint32_t range = max - min;
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	60fb      	str	r3, [r7, #12]
	if (value < min) value = min;
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	429a      	cmp	r2, r3
 8001530:	d201      	bcs.n	8001536 <Humid_Calibrate+0x28>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	607b      	str	r3, [r7, #4]
	if (value > max) value = max;
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	429a      	cmp	r2, r3
 800153c:	d901      	bls.n	8001542 <Humid_Calibrate+0x34>
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	607b      	str	r3, [r7, #4]
	return (max - value) * 100 / range;
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2264      	movs	r2, #100	; 0x64
 800154a:	fb02 f203 	mul.w	r2, r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <Light_Calibrate>:
uint32_t Light_Calibrate(uint32_t value)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint32_t max = 3110;
 8001568:	f640 4326 	movw	r3, #3110	; 0xc26
 800156c:	617b      	str	r3, [r7, #20]
	uint32_t min = 690;
 800156e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001572:	613b      	str	r3, [r7, #16]
	uint32_t range = max - min;
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	60fb      	str	r3, [r7, #12]
	if (value < min) value = min;
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d201      	bcs.n	8001588 <Light_Calibrate+0x28>
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	607b      	str	r3, [r7, #4]
	if (value > max) value = max;
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	d901      	bls.n	8001594 <Light_Calibrate+0x34>
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	607b      	str	r3, [r7, #4]
	return (max - value) * 100 / range;
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2264      	movs	r2, #100	; 0x64
 800159c:	fb02 f203 	mul.w	r2, r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	0000      	movs	r0, r0
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <Temperature_Calibrate>:
uint32_t Temperature_Calibrate(uint32_t value)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint32_t max = 4095;
 80015c0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015c4:	617b      	str	r3, [r7, #20]
	uint32_t min = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
	float tem_cons = 3.3/4095;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <Temperature_Calibrate+0xa0>)
 80015cc:	60fb      	str	r3, [r7, #12]
	if (value < min) value = min;
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d201      	bcs.n	80015da <Temperature_Calibrate+0x22>
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	607b      	str	r3, [r7, #4]
	if (value > max) value = max;
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d901      	bls.n	80015e6 <Temperature_Calibrate+0x2e>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	607b      	str	r3, [r7, #4]
	return ((value*tem_cons - .76)/.0025) + 25;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	ee17 0a90 	vmov	r0, s15
 80015fc:	f7fe ffac 	bl	8000558 <__aeabi_f2d>
 8001600:	a311      	add	r3, pc, #68	; (adr r3, 8001648 <Temperature_Calibrate+0x90>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fe47 	bl	8000298 <__aeabi_dsub>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4618      	mov	r0, r3
 8001610:	4621      	mov	r1, r4
 8001612:	a30f      	add	r3, pc, #60	; (adr r3, 8001650 <Temperature_Calibrate+0x98>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f920 	bl	800085c <__aeabi_ddiv>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	4618      	mov	r0, r3
 8001622:	4621      	mov	r1, r4
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <Temperature_Calibrate+0xa4>)
 800162a:	f7fe fe37 	bl	800029c <__adddf3>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	f7ff f9f9 	bl	8000a2c <__aeabi_d2uiz>
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	f3af 8000 	nop.w
 8001648:	851eb852 	.word	0x851eb852
 800164c:	3fe851eb 	.word	0x3fe851eb
 8001650:	47ae147b 	.word	0x47ae147b
 8001654:	3f647ae1 	.word	0x3f647ae1
 8001658:	3a534067 	.word	0x3a534067
 800165c:	40390000 	.word	0x40390000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001666:	e7fe      	b.n	8001666 <Error_Handler+0x6>

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 fe88 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_ADC_MspInit+0x7c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d127      	bne.n	800172a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_ADC_MspInit+0x80>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_ADC_MspInit+0x80>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_ADC_MspInit+0x80>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_ADC_MspInit+0x80>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_ADC_MspInit+0x80>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_ADC_MspInit+0x80>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001712:	2303      	movs	r3, #3
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_ADC_MspInit+0x84>)
 8001726:	f000 fe7d 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012000 	.word	0x40012000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a32      	ldr	r2, [pc, #200]	; (8001828 <HAL_UART_MspInit+0xe8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12d      	bne.n	80017be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_UART_MspInit+0xec>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a30      	ldr	r2, [pc, #192]	; (800182c <HAL_UART_MspInit+0xec>)
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_UART_MspInit+0xec>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_UART_MspInit+0xec>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_UART_MspInit+0xec>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_UART_MspInit+0xec>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800179a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ac:	2307      	movs	r3, #7
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	481e      	ldr	r0, [pc, #120]	; (8001830 <HAL_UART_MspInit+0xf0>)
 80017b8:	f000 fe34 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017bc:	e030      	b.n	8001820 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_UART_MspInit+0xf4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d12b      	bne.n	8001820 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_UART_MspInit+0xec>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_UART_MspInit+0xec>)
 80017d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_MspInit+0xec>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_UART_MspInit+0xec>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_UART_MspInit+0xec>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_UART_MspInit+0xec>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001800:	230c      	movs	r3, #12
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001810:	2307      	movs	r3, #7
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_UART_MspInit+0xf0>)
 800181c:	f000 fe02 	bl	8002424 <HAL_GPIO_Init>
}
 8001820:	bf00      	nop
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40011000 	.word	0x40011000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	40004400 	.word	0x40004400

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f8ca 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f002 f874 	bl	80039a8 <__errno>
 80018c0:	4602      	mov	r2, r0
 80018c2:	230c      	movs	r3, #12
 80018c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20020000 	.word	0x20020000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	2000008c 	.word	0x2000008c
 80018f4:	200001a0 	.word	0x200001a0

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <SystemInit+0x28>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <SystemInit+0x28>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SystemInit+0x28>)
 800190e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001912:	609a      	str	r2, [r3, #8]
#endif
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001928:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800192a:	e003      	b.n	8001934 <LoopCopyDataInit>

0800192c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800192e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001930:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001932:	3104      	adds	r1, #4

08001934 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001938:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800193c:	d3f6      	bcc.n	800192c <CopyDataInit>
  ldr  r2, =_sbss
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001940:	e002      	b.n	8001948 <LoopFillZerobss>

08001942 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001942:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001944:	f842 3b04 	str.w	r3, [r2], #4

08001948 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800194a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800194c:	d3f9      	bcc.n	8001942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800194e:	f7ff ffd3 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001952:	f002 f82f 	bl	80039b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fa09 	bl	8000d6c <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800195c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001960:	080042dc 	.word	0x080042dc
  ldr  r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001968:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800196c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001970:	2000019c 	.word	0x2000019c

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <HAL_Init+0x40>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_Init+0x40>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x40>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 fd0b 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fe5c 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fd15 	bl	800240a <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 fceb 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000194 	.word	0x20000194

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000194 	.word	0x20000194

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_Delay+0x40>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e033      	b.n	8001b1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fdfa 	bl	80016b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fab4 	bl	8002060 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b0e:	e001      	b.n	8001b14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Start+0x1a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e08a      	b.n	8001c58 <HAL_ADC_Start+0x130>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d018      	beq.n	8001b8a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HAL_ADC_Start+0x13c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a3e      	ldr	r2, [pc, #248]	; (8001c68 <HAL_ADC_Start+0x140>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9a      	lsrs	r2, r3, #18
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d15e      	bne.n	8001c56 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd6:	d106      	bne.n	8001be6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	f023 0206 	bic.w	r2, r3, #6
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_ADC_Start+0x144>)
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c00:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11c      	bne.n	8001c56 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e013      	b.n	8001c56 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_ADC_Start+0x148>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d10e      	bne.n	8001c56 <HAL_ADC_Start+0x12e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c54:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	40012000 	.word	0x40012000

08001c74 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Stop+0x16>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e021      	b.n	8001cce <HAL_ADC_Stop+0x5a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d113      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d06:	d10b      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e05c      	b.n	8001dda <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d20:	f7ff fe90 	bl	8001a44 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d26:	e01a      	b.n	8001d5e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2e:	d016      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_ADC_PollForConversion+0x6c>
 8001d36:	f7ff fe85 	bl	8001a44 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d20b      	bcs.n	8001d5e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f043 0204 	orr.w	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e03d      	b.n	8001dda <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d1dd      	bne.n	8001d28 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0212 	mvn.w	r2, #18
 8001d74:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d123      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11f      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e113      	b.n	8002040 <HAL_ADC_ConfigChannel+0x244>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d925      	bls.n	8001e74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68d9      	ldr	r1, [r3, #12]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68d9      	ldr	r1, [r3, #12]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4603      	mov	r3, r0
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4403      	add	r3, r0
 8001e66:	3b1e      	subs	r3, #30
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	e022      	b.n	8001eba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6919      	ldr	r1, [r3, #16]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	2207      	movs	r2, #7
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6919      	ldr	r1, [r3, #16]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4403      	add	r3, r0
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d824      	bhi.n	8001f0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b05      	subs	r3, #5
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b05      	subs	r3, #5
 8001efe:	fa00 f203 	lsl.w	r2, r0, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0a:	e04c      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b0c      	cmp	r3, #12
 8001f12:	d824      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b23      	subs	r3, #35	; 0x23
 8001f26:	221f      	movs	r2, #31
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	400a      	ands	r2, r1
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b23      	subs	r3, #35	; 0x23
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5c:	e023      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b41      	subs	r3, #65	; 0x41
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b41      	subs	r3, #65	; 0x41
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_ADC_ConfigChannel+0x250>)
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a28      	ldr	r2, [pc, #160]	; (8002050 <HAL_ADC_ConfigChannel+0x254>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d8>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_ADC_ConfigChannel+0x254>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12b      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x23a>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_ADC_ConfigChannel+0x258>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b11      	cmp	r3, #17
 8001fee:	d122      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_ADC_ConfigChannel+0x258>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d111      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_ADC_ConfigChannel+0x25c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <HAL_ADC_ConfigChannel+0x260>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0c9a      	lsrs	r2, r3, #18
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002028:	e002      	b.n	8002030 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3b01      	subs	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	40012000 	.word	0x40012000
 8002054:	10000012 	.word	0x10000012
 8002058:	20000000 	.word	0x20000000
 800205c:	431bde83 	.word	0x431bde83

08002060 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002068:	4b79      	ldr	r3, [pc, #484]	; (8002250 <ADC_Init+0x1f0>)
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	021a      	lsls	r2, r3, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	4a58      	ldr	r2, [pc, #352]	; (8002254 <ADC_Init+0x1f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d022      	beq.n	800213e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002106:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6899      	ldr	r1, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	e00f      	b.n	800215e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800214c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800215c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0202 	bic.w	r2, r2, #2
 800216c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6899      	ldr	r1, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	005a      	lsls	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	3b01      	subs	r3, #1
 80021b8:	035a      	lsls	r2, r3, #13
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e007      	b.n	80021d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	051a      	lsls	r2, r3, #20
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002216:	025a      	lsls	r2, r3, #9
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	029a      	lsls	r2, r3, #10
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40012300 	.word	0x40012300
 8002254:	0f000001 	.word	0x0f000001

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff47 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff5c 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffb0 	bl	8002378 <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e159      	b.n	80026f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8148 	bne.w	80026ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d00b      	beq.n	800247e <HAL_GPIO_Init+0x5a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002472:	2b11      	cmp	r3, #17
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b12      	cmp	r3, #18
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0xfc>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b12      	cmp	r3, #18
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a2 	beq.w	80026ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_GPIO_Init+0x2e4>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_GPIO_Init+0x2e4>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_GPIO_Init+0x2e4>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_GPIO_Init+0x2e8>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2ec>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x202>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_GPIO_Init+0x2f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x1fe>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2f4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x1fa>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x2f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x1f6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a44      	ldr	r2, [pc, #272]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x1f2>
 8002612:	2304      	movs	r3, #4
 8002614:	e008      	b.n	8002628 <HAL_GPIO_Init+0x204>
 8002616:	2307      	movs	r3, #7
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x204>
 800261a:	2303      	movs	r3, #3
 800261c:	e004      	b.n	8002628 <HAL_GPIO_Init+0x204>
 800261e:	2302      	movs	r3, #2
 8002620:	e002      	b.n	8002628 <HAL_GPIO_Init+0x204>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x204>
 8002626:	2300      	movs	r3, #0
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f002 0203 	and.w	r2, r2, #3
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	4093      	lsls	r3, r2
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002638:	4934      	ldr	r1, [pc, #208]	; (800270c <HAL_GPIO_Init+0x2e8>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266a:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <HAL_GPIO_Init+0x300>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002694:	4a23      	ldr	r2, [pc, #140]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_GPIO_Init+0x300>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x300>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_GPIO_Init+0x300>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_GPIO_Init+0x300>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	f67f aea2 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e25b      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d075      	beq.n	8002896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	4ba3      	ldr	r3, [pc, #652]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b9d      	ldr	r3, [pc, #628]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b99      	ldr	r3, [pc, #612]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e236      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x74>
 80027f2:	4b91      	ldr	r3, [pc, #580]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a90      	ldr	r2, [pc, #576]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8a      	ldr	r2, [pc, #552]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a87      	ldr	r2, [pc, #540]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002824:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a83      	ldr	r2, [pc, #524]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a80      	ldr	r2, [pc, #512]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff f8fe 	bl	8001a44 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f8fa 	bl	8001a44 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1fb      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xc0>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f8ea 	bl	8001a44 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f8e6 	bl	8001a44 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1e7      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1bb      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4952      	ldr	r1, [pc, #328]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7ff f89f 	bl	8001a44 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff f89b 	bl	8001a44 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e19c      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4940      	ldr	r1, [pc, #256]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff f87e 	bl	8001a44 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff f87a 	bl	8001a44 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e17b      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d030      	beq.n	80029d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff f85e 	bl	8001a44 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff f85a 	bl	8001a44 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e15b      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff f847 	bl	8001a44 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7ff f843 	bl	8001a44 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e144      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a0 	beq.w	8002b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f809 	bl	8001a44 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e011      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
 8002a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fffc 	bl	8001a44 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0fd      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2f0>
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a7c      	ldr	r2, [pc, #496]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x312>
 8002a84:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a76      	ldr	r2, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a73      	ldr	r2, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a9e:	4b71      	ldr	r3, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a70      	ldr	r2, [pc, #448]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	4b6e      	ldr	r3, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a6d      	ldr	r2, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe ffc1 	bl	8001a44 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ffbd 	bl	8001a44 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0bc      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x33a>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe ffab 	bl	8001a44 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe ffa7 	bl	8001a44 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0a6      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8092 	beq.w	8002c54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d05c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d141      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b48      	ldr	r3, [pc, #288]	; (8002c68 <HAL_RCC_OscConfig+0x4dc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe ff7b 	bl	8001a44 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe ff77 	bl	8001a44 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e078      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b64:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	019b      	lsls	r3, r3, #6
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4933      	ldr	r1, [pc, #204]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9a:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x4dc>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe ff50 	bl	8001a44 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe ff4c 	bl	8001a44 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04d      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
 8002bc6:	e045      	b.n	8002c54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x4dc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe ff39 	bl	8001a44 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe ff35 	bl	8001a44 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e036      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be8:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002bf4:	e02e      	b.n	8002c54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e029      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x4d8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d115      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40007000 	.word	0x40007000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	42470060 	.word	0x42470060

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0cc      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d90c      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d044      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d119      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e067      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4934      	ldr	r1, [pc, #208]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fe72 	bl	8001a44 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fe6e 	bl	8001a44 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d20c      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fdd2 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08004280 	.word	0x08004280
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	2300      	movs	r3, #0
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d007      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x32>
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x38>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80b4 	bne.w	8002fcc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e66:	60bb      	str	r3, [r7, #8]
       break;
 8002e68:	e0b3      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e6c:	60bb      	str	r3, [r7, #8]
      break;
 8002e6e:	e0b0      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b5a      	ldr	r3, [pc, #360]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7a:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04a      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b55      	ldr	r3, [pc, #340]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	ea03 0501 	and.w	r5, r3, r1
 8002e9c:	ea04 0602 	and.w	r6, r4, r2
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4632      	mov	r2, r6
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	f04f 0400 	mov.w	r4, #0
 8002eac:	0154      	lsls	r4, r2, #5
 8002eae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eb2:	014b      	lsls	r3, r1, #5
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	1b49      	subs	r1, r1, r5
 8002eba:	eb62 0206 	sbc.w	r2, r2, r6
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	f04f 0400 	mov.w	r4, #0
 8002ec6:	0194      	lsls	r4, r2, #6
 8002ec8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ecc:	018b      	lsls	r3, r1, #6
 8002ece:	1a5b      	subs	r3, r3, r1
 8002ed0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	00e2      	lsls	r2, r4, #3
 8002ede:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ee2:	00d9      	lsls	r1, r3, #3
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4614      	mov	r4, r2
 8002ee8:	195b      	adds	r3, r3, r5
 8002eea:	eb44 0406 	adc.w	r4, r4, r6
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	0262      	lsls	r2, r4, #9
 8002ef8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002efc:	0259      	lsls	r1, r3, #9
 8002efe:	460b      	mov	r3, r1
 8002f00:	4614      	mov	r4, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	4621      	mov	r1, r4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	f7fd fdac 	bl	8000a6c <__aeabi_uldivmod>
 8002f14:	4603      	mov	r3, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e049      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	ea03 0501 	and.w	r5, r3, r1
 8002f32:	ea04 0602 	and.w	r6, r4, r2
 8002f36:	4629      	mov	r1, r5
 8002f38:	4632      	mov	r2, r6
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	0154      	lsls	r4, r2, #5
 8002f44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f48:	014b      	lsls	r3, r1, #5
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	1b49      	subs	r1, r1, r5
 8002f50:	eb62 0206 	sbc.w	r2, r2, r6
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	f04f 0400 	mov.w	r4, #0
 8002f5c:	0194      	lsls	r4, r2, #6
 8002f5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f62:	018b      	lsls	r3, r1, #6
 8002f64:	1a5b      	subs	r3, r3, r1
 8002f66:	eb64 0402 	sbc.w	r4, r4, r2
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	00e2      	lsls	r2, r4, #3
 8002f74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f78:	00d9      	lsls	r1, r3, #3
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	195b      	adds	r3, r3, r5
 8002f80:	eb44 0406 	adc.w	r4, r4, r6
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	02a2      	lsls	r2, r4, #10
 8002f8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f92:	0299      	lsls	r1, r3, #10
 8002f94:	460b      	mov	r3, r1
 8002f96:	4614      	mov	r4, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	f7fd fd61 	bl	8000a6c <__aeabi_uldivmod>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	60bb      	str	r3, [r7, #8]
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fce:	60bb      	str	r3, [r7, #8]
      break;
 8002fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003004:	f7ff fff0 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003008:	4601      	mov	r1, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0a9b      	lsrs	r3, r3, #10
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4a03      	ldr	r2, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	08004290 	.word	0x08004290

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800302c:	f7ff ffdc 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003030:	4601      	mov	r1, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	0b5b      	lsrs	r3, r3, #13
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4a03      	ldr	r2, [pc, #12]	; (800304c <HAL_RCC_GetPCLK2Freq+0x24>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	08004290 	.word	0x08004290

08003050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e03f      	b.n	80030e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe fb62 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f90b 	bl	80032b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b088      	sub	sp, #32
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	f040 8083 	bne.w	8003212 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Transmit+0x2e>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e07b      	b.n	8003214 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_UART_Transmit+0x40>
 8003126:	2302      	movs	r3, #2
 8003128:	e074      	b.n	8003214 <HAL_UART_Transmit+0x12a>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2221      	movs	r2, #33	; 0x21
 800313c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003140:	f7fe fc80 	bl	8001a44 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800315a:	e042      	b.n	80031e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	d122      	bne.n	80031ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f84c 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e042      	b.n	8003214 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3302      	adds	r3, #2
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e017      	b.n	80031e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3301      	adds	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	e013      	b.n	80031e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f829 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e01f      	b.n	8003214 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1b7      	bne.n	800315c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f810 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e006      	b.n	8003214 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	e02c      	b.n	8003288 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d028      	beq.n	8003288 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <UART_WaitOnFlagUntilTimeout+0x30>
 800323c:	f7fe fc02 	bl	8001a44 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	d21d      	bcs.n	8003288 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800325a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e00f      	b.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d0c3      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032f2:	f023 030c 	bic.w	r3, r3, #12
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331e:	f040 818b 	bne.w	8003638 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4ac1      	ldr	r2, [pc, #772]	; (800362c <UART_SetConfig+0x37c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d005      	beq.n	8003338 <UART_SetConfig+0x88>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4abf      	ldr	r2, [pc, #764]	; (8003630 <UART_SetConfig+0x380>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f040 80bd 	bne.w	80034b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff fe76 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 800333c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	461d      	mov	r5, r3
 8003342:	f04f 0600 	mov.w	r6, #0
 8003346:	46a8      	mov	r8, r5
 8003348:	46b1      	mov	r9, r6
 800334a:	eb18 0308 	adds.w	r3, r8, r8
 800334e:	eb49 0409 	adc.w	r4, r9, r9
 8003352:	4698      	mov	r8, r3
 8003354:	46a1      	mov	r9, r4
 8003356:	eb18 0805 	adds.w	r8, r8, r5
 800335a:	eb49 0906 	adc.w	r9, r9, r6
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800336a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800336e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003372:	4688      	mov	r8, r1
 8003374:	4691      	mov	r9, r2
 8003376:	eb18 0005 	adds.w	r0, r8, r5
 800337a:	eb49 0106 	adc.w	r1, r9, r6
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	461d      	mov	r5, r3
 8003384:	f04f 0600 	mov.w	r6, #0
 8003388:	196b      	adds	r3, r5, r5
 800338a:	eb46 0406 	adc.w	r4, r6, r6
 800338e:	461a      	mov	r2, r3
 8003390:	4623      	mov	r3, r4
 8003392:	f7fd fb6b 	bl	8000a6c <__aeabi_uldivmod>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	461a      	mov	r2, r3
 800339c:	4ba5      	ldr	r3, [pc, #660]	; (8003634 <UART_SetConfig+0x384>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	461d      	mov	r5, r3
 80033ac:	f04f 0600 	mov.w	r6, #0
 80033b0:	46a9      	mov	r9, r5
 80033b2:	46b2      	mov	sl, r6
 80033b4:	eb19 0309 	adds.w	r3, r9, r9
 80033b8:	eb4a 040a 	adc.w	r4, sl, sl
 80033bc:	4699      	mov	r9, r3
 80033be:	46a2      	mov	sl, r4
 80033c0:	eb19 0905 	adds.w	r9, r9, r5
 80033c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033dc:	4689      	mov	r9, r1
 80033de:	4692      	mov	sl, r2
 80033e0:	eb19 0005 	adds.w	r0, r9, r5
 80033e4:	eb4a 0106 	adc.w	r1, sl, r6
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	461d      	mov	r5, r3
 80033ee:	f04f 0600 	mov.w	r6, #0
 80033f2:	196b      	adds	r3, r5, r5
 80033f4:	eb46 0406 	adc.w	r4, r6, r6
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	f7fd fb36 	bl	8000a6c <__aeabi_uldivmod>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	461a      	mov	r2, r3
 8003406:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <UART_SetConfig+0x384>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	; 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a86      	ldr	r2, [pc, #536]	; (8003634 <UART_SetConfig+0x384>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003428:	4498      	add	r8, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	461d      	mov	r5, r3
 800342e:	f04f 0600 	mov.w	r6, #0
 8003432:	46a9      	mov	r9, r5
 8003434:	46b2      	mov	sl, r6
 8003436:	eb19 0309 	adds.w	r3, r9, r9
 800343a:	eb4a 040a 	adc.w	r4, sl, sl
 800343e:	4699      	mov	r9, r3
 8003440:	46a2      	mov	sl, r4
 8003442:	eb19 0905 	adds.w	r9, r9, r5
 8003446:	eb4a 0a06 	adc.w	sl, sl, r6
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003456:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800345a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800345e:	4689      	mov	r9, r1
 8003460:	4692      	mov	sl, r2
 8003462:	eb19 0005 	adds.w	r0, r9, r5
 8003466:	eb4a 0106 	adc.w	r1, sl, r6
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	461d      	mov	r5, r3
 8003470:	f04f 0600 	mov.w	r6, #0
 8003474:	196b      	adds	r3, r5, r5
 8003476:	eb46 0406 	adc.w	r4, r6, r6
 800347a:	461a      	mov	r2, r3
 800347c:	4623      	mov	r3, r4
 800347e:	f7fd faf5 	bl	8000a6c <__aeabi_uldivmod>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	461a      	mov	r2, r3
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <UART_SetConfig+0x384>)
 800348a:	fba3 1302 	umull	r1, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2164      	movs	r1, #100	; 0x64
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	3332      	adds	r3, #50	; 0x32
 800349c:	4a65      	ldr	r2, [pc, #404]	; (8003634 <UART_SetConfig+0x384>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	f003 0207 	and.w	r2, r3, #7
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4442      	add	r2, r8
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e26f      	b.n	8003992 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7ff fda5 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80034b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	461d      	mov	r5, r3
 80034bc:	f04f 0600 	mov.w	r6, #0
 80034c0:	46a8      	mov	r8, r5
 80034c2:	46b1      	mov	r9, r6
 80034c4:	eb18 0308 	adds.w	r3, r8, r8
 80034c8:	eb49 0409 	adc.w	r4, r9, r9
 80034cc:	4698      	mov	r8, r3
 80034ce:	46a1      	mov	r9, r4
 80034d0:	eb18 0805 	adds.w	r8, r8, r5
 80034d4:	eb49 0906 	adc.w	r9, r9, r6
 80034d8:	f04f 0100 	mov.w	r1, #0
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034ec:	4688      	mov	r8, r1
 80034ee:	4691      	mov	r9, r2
 80034f0:	eb18 0005 	adds.w	r0, r8, r5
 80034f4:	eb49 0106 	adc.w	r1, r9, r6
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	461d      	mov	r5, r3
 80034fe:	f04f 0600 	mov.w	r6, #0
 8003502:	196b      	adds	r3, r5, r5
 8003504:	eb46 0406 	adc.w	r4, r6, r6
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	f7fd faae 	bl	8000a6c <__aeabi_uldivmod>
 8003510:	4603      	mov	r3, r0
 8003512:	460c      	mov	r4, r1
 8003514:	461a      	mov	r2, r3
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <UART_SetConfig+0x384>)
 8003518:	fba3 2302 	umull	r2, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	461d      	mov	r5, r3
 8003526:	f04f 0600 	mov.w	r6, #0
 800352a:	46a9      	mov	r9, r5
 800352c:	46b2      	mov	sl, r6
 800352e:	eb19 0309 	adds.w	r3, r9, r9
 8003532:	eb4a 040a 	adc.w	r4, sl, sl
 8003536:	4699      	mov	r9, r3
 8003538:	46a2      	mov	sl, r4
 800353a:	eb19 0905 	adds.w	r9, r9, r5
 800353e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003542:	f04f 0100 	mov.w	r1, #0
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800354e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003552:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003556:	4689      	mov	r9, r1
 8003558:	4692      	mov	sl, r2
 800355a:	eb19 0005 	adds.w	r0, r9, r5
 800355e:	eb4a 0106 	adc.w	r1, sl, r6
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	461d      	mov	r5, r3
 8003568:	f04f 0600 	mov.w	r6, #0
 800356c:	196b      	adds	r3, r5, r5
 800356e:	eb46 0406 	adc.w	r4, r6, r6
 8003572:	461a      	mov	r2, r3
 8003574:	4623      	mov	r3, r4
 8003576:	f7fd fa79 	bl	8000a6c <__aeabi_uldivmod>
 800357a:	4603      	mov	r3, r0
 800357c:	460c      	mov	r4, r1
 800357e:	461a      	mov	r2, r3
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <UART_SetConfig+0x384>)
 8003582:	fba3 1302 	umull	r1, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2164      	movs	r1, #100	; 0x64
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	3332      	adds	r3, #50	; 0x32
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <UART_SetConfig+0x384>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035a2:	4498      	add	r8, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	461d      	mov	r5, r3
 80035a8:	f04f 0600 	mov.w	r6, #0
 80035ac:	46a9      	mov	r9, r5
 80035ae:	46b2      	mov	sl, r6
 80035b0:	eb19 0309 	adds.w	r3, r9, r9
 80035b4:	eb4a 040a 	adc.w	r4, sl, sl
 80035b8:	4699      	mov	r9, r3
 80035ba:	46a2      	mov	sl, r4
 80035bc:	eb19 0905 	adds.w	r9, r9, r5
 80035c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035d8:	4689      	mov	r9, r1
 80035da:	4692      	mov	sl, r2
 80035dc:	eb19 0005 	adds.w	r0, r9, r5
 80035e0:	eb4a 0106 	adc.w	r1, sl, r6
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	461d      	mov	r5, r3
 80035ea:	f04f 0600 	mov.w	r6, #0
 80035ee:	196b      	adds	r3, r5, r5
 80035f0:	eb46 0406 	adc.w	r4, r6, r6
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	f7fd fa38 	bl	8000a6c <__aeabi_uldivmod>
 80035fc:	4603      	mov	r3, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	461a      	mov	r2, r3
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <UART_SetConfig+0x384>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3332      	adds	r3, #50	; 0x32
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <UART_SetConfig+0x384>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 0207 	and.w	r2, r3, #7
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4442      	add	r2, r8
 8003628:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800362a:	e1b2      	b.n	8003992 <UART_SetConfig+0x6e2>
 800362c:	40011000 	.word	0x40011000
 8003630:	40011400 	.word	0x40011400
 8003634:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4ad7      	ldr	r2, [pc, #860]	; (800399c <UART_SetConfig+0x6ec>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d005      	beq.n	800364e <UART_SetConfig+0x39e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4ad6      	ldr	r2, [pc, #856]	; (80039a0 <UART_SetConfig+0x6f0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	f040 80d1 	bne.w	80037f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800364e:	f7ff fceb 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8003652:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	469a      	mov	sl, r3
 8003658:	f04f 0b00 	mov.w	fp, #0
 800365c:	46d0      	mov	r8, sl
 800365e:	46d9      	mov	r9, fp
 8003660:	eb18 0308 	adds.w	r3, r8, r8
 8003664:	eb49 0409 	adc.w	r4, r9, r9
 8003668:	4698      	mov	r8, r3
 800366a:	46a1      	mov	r9, r4
 800366c:	eb18 080a 	adds.w	r8, r8, sl
 8003670:	eb49 090b 	adc.w	r9, r9, fp
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003680:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003684:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003688:	4688      	mov	r8, r1
 800368a:	4691      	mov	r9, r2
 800368c:	eb1a 0508 	adds.w	r5, sl, r8
 8003690:	eb4b 0609 	adc.w	r6, fp, r9
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4619      	mov	r1, r3
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	f04f 0400 	mov.w	r4, #0
 80036a6:	0094      	lsls	r4, r2, #2
 80036a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	461a      	mov	r2, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	4628      	mov	r0, r5
 80036b4:	4631      	mov	r1, r6
 80036b6:	f7fd f9d9 	bl	8000a6c <__aeabi_uldivmod>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	461a      	mov	r2, r3
 80036c0:	4bb8      	ldr	r3, [pc, #736]	; (80039a4 <UART_SetConfig+0x6f4>)
 80036c2:	fba3 2302 	umull	r2, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	469b      	mov	fp, r3
 80036d0:	f04f 0c00 	mov.w	ip, #0
 80036d4:	46d9      	mov	r9, fp
 80036d6:	46e2      	mov	sl, ip
 80036d8:	eb19 0309 	adds.w	r3, r9, r9
 80036dc:	eb4a 040a 	adc.w	r4, sl, sl
 80036e0:	4699      	mov	r9, r3
 80036e2:	46a2      	mov	sl, r4
 80036e4:	eb19 090b 	adds.w	r9, r9, fp
 80036e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003700:	4689      	mov	r9, r1
 8003702:	4692      	mov	sl, r2
 8003704:	eb1b 0509 	adds.w	r5, fp, r9
 8003708:	eb4c 060a 	adc.w	r6, ip, sl
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4619      	mov	r1, r3
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	f04f 0400 	mov.w	r4, #0
 800371e:	0094      	lsls	r4, r2, #2
 8003720:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003724:	008b      	lsls	r3, r1, #2
 8003726:	461a      	mov	r2, r3
 8003728:	4623      	mov	r3, r4
 800372a:	4628      	mov	r0, r5
 800372c:	4631      	mov	r1, r6
 800372e:	f7fd f99d 	bl	8000a6c <__aeabi_uldivmod>
 8003732:	4603      	mov	r3, r0
 8003734:	460c      	mov	r4, r1
 8003736:	461a      	mov	r2, r3
 8003738:	4b9a      	ldr	r3, [pc, #616]	; (80039a4 <UART_SetConfig+0x6f4>)
 800373a:	fba3 1302 	umull	r1, r3, r3, r2
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2164      	movs	r1, #100	; 0x64
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	3332      	adds	r3, #50	; 0x32
 800374c:	4a95      	ldr	r2, [pc, #596]	; (80039a4 <UART_SetConfig+0x6f4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003758:	4498      	add	r8, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	469b      	mov	fp, r3
 800375e:	f04f 0c00 	mov.w	ip, #0
 8003762:	46d9      	mov	r9, fp
 8003764:	46e2      	mov	sl, ip
 8003766:	eb19 0309 	adds.w	r3, r9, r9
 800376a:	eb4a 040a 	adc.w	r4, sl, sl
 800376e:	4699      	mov	r9, r3
 8003770:	46a2      	mov	sl, r4
 8003772:	eb19 090b 	adds.w	r9, r9, fp
 8003776:	eb4a 0a0c 	adc.w	sl, sl, ip
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800378a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800378e:	4689      	mov	r9, r1
 8003790:	4692      	mov	sl, r2
 8003792:	eb1b 0509 	adds.w	r5, fp, r9
 8003796:	eb4c 060a 	adc.w	r6, ip, sl
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4619      	mov	r1, r3
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	0094      	lsls	r4, r2, #2
 80037ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037b2:	008b      	lsls	r3, r1, #2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4623      	mov	r3, r4
 80037b8:	4628      	mov	r0, r5
 80037ba:	4631      	mov	r1, r6
 80037bc:	f7fd f956 	bl	8000a6c <__aeabi_uldivmod>
 80037c0:	4603      	mov	r3, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <UART_SetConfig+0x6f4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	; 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a72      	ldr	r2, [pc, #456]	; (80039a4 <UART_SetConfig+0x6f4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4442      	add	r2, r8
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	e0d0      	b.n	8003992 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7ff fc06 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	469a      	mov	sl, r3
 80037fa:	f04f 0b00 	mov.w	fp, #0
 80037fe:	46d0      	mov	r8, sl
 8003800:	46d9      	mov	r9, fp
 8003802:	eb18 0308 	adds.w	r3, r8, r8
 8003806:	eb49 0409 	adc.w	r4, r9, r9
 800380a:	4698      	mov	r8, r3
 800380c:	46a1      	mov	r9, r4
 800380e:	eb18 080a 	adds.w	r8, r8, sl
 8003812:	eb49 090b 	adc.w	r9, r9, fp
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003822:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003826:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800382a:	4688      	mov	r8, r1
 800382c:	4691      	mov	r9, r2
 800382e:	eb1a 0508 	adds.w	r5, sl, r8
 8003832:	eb4b 0609 	adc.w	r6, fp, r9
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4619      	mov	r1, r3
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f04f 0400 	mov.w	r4, #0
 8003848:	0094      	lsls	r4, r2, #2
 800384a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800384e:	008b      	lsls	r3, r1, #2
 8003850:	461a      	mov	r2, r3
 8003852:	4623      	mov	r3, r4
 8003854:	4628      	mov	r0, r5
 8003856:	4631      	mov	r1, r6
 8003858:	f7fd f908 	bl	8000a6c <__aeabi_uldivmod>
 800385c:	4603      	mov	r3, r0
 800385e:	460c      	mov	r4, r1
 8003860:	461a      	mov	r2, r3
 8003862:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <UART_SetConfig+0x6f4>)
 8003864:	fba3 2302 	umull	r2, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	469b      	mov	fp, r3
 8003872:	f04f 0c00 	mov.w	ip, #0
 8003876:	46d9      	mov	r9, fp
 8003878:	46e2      	mov	sl, ip
 800387a:	eb19 0309 	adds.w	r3, r9, r9
 800387e:	eb4a 040a 	adc.w	r4, sl, sl
 8003882:	4699      	mov	r9, r3
 8003884:	46a2      	mov	sl, r4
 8003886:	eb19 090b 	adds.w	r9, r9, fp
 800388a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800389a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800389e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038a2:	4689      	mov	r9, r1
 80038a4:	4692      	mov	sl, r2
 80038a6:	eb1b 0509 	adds.w	r5, fp, r9
 80038aa:	eb4c 060a 	adc.w	r6, ip, sl
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4619      	mov	r1, r3
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	f04f 0400 	mov.w	r4, #0
 80038c0:	0094      	lsls	r4, r2, #2
 80038c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038c6:	008b      	lsls	r3, r1, #2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	4631      	mov	r1, r6
 80038d0:	f7fd f8cc 	bl	8000a6c <__aeabi_uldivmod>
 80038d4:	4603      	mov	r3, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	461a      	mov	r2, r3
 80038da:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <UART_SetConfig+0x6f4>)
 80038dc:	fba3 1302 	umull	r1, r3, r3, r2
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	2164      	movs	r1, #100	; 0x64
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	3332      	adds	r3, #50	; 0x32
 80038ee:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <UART_SetConfig+0x6f4>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fa:	4498      	add	r8, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	469b      	mov	fp, r3
 8003900:	f04f 0c00 	mov.w	ip, #0
 8003904:	46d9      	mov	r9, fp
 8003906:	46e2      	mov	sl, ip
 8003908:	eb19 0309 	adds.w	r3, r9, r9
 800390c:	eb4a 040a 	adc.w	r4, sl, sl
 8003910:	4699      	mov	r9, r3
 8003912:	46a2      	mov	sl, r4
 8003914:	eb19 090b 	adds.w	r9, r9, fp
 8003918:	eb4a 0a0c 	adc.w	sl, sl, ip
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003928:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800392c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003930:	4689      	mov	r9, r1
 8003932:	4692      	mov	sl, r2
 8003934:	eb1b 0509 	adds.w	r5, fp, r9
 8003938:	eb4c 060a 	adc.w	r6, ip, sl
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f04f 0400 	mov.w	r4, #0
 800394e:	0094      	lsls	r4, r2, #2
 8003950:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003954:	008b      	lsls	r3, r1, #2
 8003956:	461a      	mov	r2, r3
 8003958:	4623      	mov	r3, r4
 800395a:	4628      	mov	r0, r5
 800395c:	4631      	mov	r1, r6
 800395e:	f7fd f885 	bl	8000a6c <__aeabi_uldivmod>
 8003962:	4603      	mov	r3, r0
 8003964:	460c      	mov	r4, r1
 8003966:	461a      	mov	r2, r3
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <UART_SetConfig+0x6f4>)
 800396a:	fba3 1302 	umull	r1, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2164      	movs	r1, #100	; 0x64
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <UART_SetConfig+0x6f4>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	f003 020f 	and.w	r2, r3, #15
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4442      	add	r2, r8
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	e7ff      	b.n	8003992 <UART_SetConfig+0x6e2>
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399c:	40011000 	.word	0x40011000
 80039a0:	40011400 	.word	0x40011400
 80039a4:	51eb851f 	.word	0x51eb851f

080039a8 <__errno>:
 80039a8:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <__errno+0x8>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	4e0d      	ldr	r6, [pc, #52]	; (80039ec <__libc_init_array+0x38>)
 80039b8:	4c0d      	ldr	r4, [pc, #52]	; (80039f0 <__libc_init_array+0x3c>)
 80039ba:	1ba4      	subs	r4, r4, r6
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	2500      	movs	r5, #0
 80039c0:	42a5      	cmp	r5, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	4e0b      	ldr	r6, [pc, #44]	; (80039f4 <__libc_init_array+0x40>)
 80039c6:	4c0c      	ldr	r4, [pc, #48]	; (80039f8 <__libc_init_array+0x44>)
 80039c8:	f000 fc26 	bl	8004218 <_init>
 80039cc:	1ba4      	subs	r4, r4, r6
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	2500      	movs	r5, #0
 80039d2:	42a5      	cmp	r5, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039dc:	4798      	blx	r3
 80039de:	3501      	adds	r5, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039e6:	4798      	blx	r3
 80039e8:	3501      	adds	r5, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	080042d4 	.word	0x080042d4
 80039f0:	080042d4 	.word	0x080042d4
 80039f4:	080042d4 	.word	0x080042d4
 80039f8:	080042d8 	.word	0x080042d8

080039fc <memset>:
 80039fc:	4402      	add	r2, r0
 80039fe:	4603      	mov	r3, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <siprintf>:
 8003a0c:	b40e      	push	{r1, r2, r3}
 8003a0e:	b500      	push	{lr}
 8003a10:	b09c      	sub	sp, #112	; 0x70
 8003a12:	ab1d      	add	r3, sp, #116	; 0x74
 8003a14:	9002      	str	r0, [sp, #8]
 8003a16:	9006      	str	r0, [sp, #24]
 8003a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a1c:	4809      	ldr	r0, [pc, #36]	; (8003a44 <siprintf+0x38>)
 8003a1e:	9107      	str	r1, [sp, #28]
 8003a20:	9104      	str	r1, [sp, #16]
 8003a22:	4909      	ldr	r1, [pc, #36]	; (8003a48 <siprintf+0x3c>)
 8003a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a28:	9105      	str	r1, [sp, #20]
 8003a2a:	6800      	ldr	r0, [r0, #0]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	a902      	add	r1, sp, #8
 8003a30:	f000 f866 	bl	8003b00 <_svfiprintf_r>
 8003a34:	9b02      	ldr	r3, [sp, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	b01c      	add	sp, #112	; 0x70
 8003a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a40:	b003      	add	sp, #12
 8003a42:	4770      	bx	lr
 8003a44:	2000000c 	.word	0x2000000c
 8003a48:	ffff0208 	.word	0xffff0208

08003a4c <__ssputs_r>:
 8003a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a50:	688e      	ldr	r6, [r1, #8]
 8003a52:	429e      	cmp	r6, r3
 8003a54:	4682      	mov	sl, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	4690      	mov	r8, r2
 8003a5a:	4699      	mov	r9, r3
 8003a5c:	d837      	bhi.n	8003ace <__ssputs_r+0x82>
 8003a5e:	898a      	ldrh	r2, [r1, #12]
 8003a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a64:	d031      	beq.n	8003aca <__ssputs_r+0x7e>
 8003a66:	6825      	ldr	r5, [r4, #0]
 8003a68:	6909      	ldr	r1, [r1, #16]
 8003a6a:	1a6f      	subs	r7, r5, r1
 8003a6c:	6965      	ldr	r5, [r4, #20]
 8003a6e:	2302      	movs	r3, #2
 8003a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a74:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a78:	f109 0301 	add.w	r3, r9, #1
 8003a7c:	443b      	add	r3, r7
 8003a7e:	429d      	cmp	r5, r3
 8003a80:	bf38      	it	cc
 8003a82:	461d      	movcc	r5, r3
 8003a84:	0553      	lsls	r3, r2, #21
 8003a86:	d530      	bpl.n	8003aea <__ssputs_r+0x9e>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f000 fb2b 	bl	80040e4 <_malloc_r>
 8003a8e:	4606      	mov	r6, r0
 8003a90:	b950      	cbnz	r0, 8003aa8 <__ssputs_r+0x5c>
 8003a92:	230c      	movs	r3, #12
 8003a94:	f8ca 3000 	str.w	r3, [sl]
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	463a      	mov	r2, r7
 8003aaa:	6921      	ldr	r1, [r4, #16]
 8003aac:	f000 faa8 	bl	8004000 <memcpy>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	6126      	str	r6, [r4, #16]
 8003abe:	6165      	str	r5, [r4, #20]
 8003ac0:	443e      	add	r6, r7
 8003ac2:	1bed      	subs	r5, r5, r7
 8003ac4:	6026      	str	r6, [r4, #0]
 8003ac6:	60a5      	str	r5, [r4, #8]
 8003ac8:	464e      	mov	r6, r9
 8003aca:	454e      	cmp	r6, r9
 8003acc:	d900      	bls.n	8003ad0 <__ssputs_r+0x84>
 8003ace:	464e      	mov	r6, r9
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	f000 fa9e 	bl	8004016 <memmove>
 8003ada:	68a3      	ldr	r3, [r4, #8]
 8003adc:	1b9b      	subs	r3, r3, r6
 8003ade:	60a3      	str	r3, [r4, #8]
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	441e      	add	r6, r3
 8003ae4:	6026      	str	r6, [r4, #0]
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e7dc      	b.n	8003aa4 <__ssputs_r+0x58>
 8003aea:	462a      	mov	r2, r5
 8003aec:	f000 fb54 	bl	8004198 <_realloc_r>
 8003af0:	4606      	mov	r6, r0
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d1e2      	bne.n	8003abc <__ssputs_r+0x70>
 8003af6:	6921      	ldr	r1, [r4, #16]
 8003af8:	4650      	mov	r0, sl
 8003afa:	f000 faa5 	bl	8004048 <_free_r>
 8003afe:	e7c8      	b.n	8003a92 <__ssputs_r+0x46>

08003b00 <_svfiprintf_r>:
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	461d      	mov	r5, r3
 8003b06:	898b      	ldrh	r3, [r1, #12]
 8003b08:	061f      	lsls	r7, r3, #24
 8003b0a:	b09d      	sub	sp, #116	; 0x74
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	4616      	mov	r6, r2
 8003b12:	d50f      	bpl.n	8003b34 <_svfiprintf_r+0x34>
 8003b14:	690b      	ldr	r3, [r1, #16]
 8003b16:	b96b      	cbnz	r3, 8003b34 <_svfiprintf_r+0x34>
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	f000 fae3 	bl	80040e4 <_malloc_r>
 8003b1e:	6020      	str	r0, [r4, #0]
 8003b20:	6120      	str	r0, [r4, #16]
 8003b22:	b928      	cbnz	r0, 8003b30 <_svfiprintf_r+0x30>
 8003b24:	230c      	movs	r3, #12
 8003b26:	f8c8 3000 	str.w	r3, [r8]
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2e:	e0c8      	b.n	8003cc2 <_svfiprintf_r+0x1c2>
 8003b30:	2340      	movs	r3, #64	; 0x40
 8003b32:	6163      	str	r3, [r4, #20]
 8003b34:	2300      	movs	r3, #0
 8003b36:	9309      	str	r3, [sp, #36]	; 0x24
 8003b38:	2320      	movs	r3, #32
 8003b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b3e:	2330      	movs	r3, #48	; 0x30
 8003b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b44:	9503      	str	r5, [sp, #12]
 8003b46:	f04f 0b01 	mov.w	fp, #1
 8003b4a:	4637      	mov	r7, r6
 8003b4c:	463d      	mov	r5, r7
 8003b4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b52:	b10b      	cbz	r3, 8003b58 <_svfiprintf_r+0x58>
 8003b54:	2b25      	cmp	r3, #37	; 0x25
 8003b56:	d13e      	bne.n	8003bd6 <_svfiprintf_r+0xd6>
 8003b58:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b5c:	d00b      	beq.n	8003b76 <_svfiprintf_r+0x76>
 8003b5e:	4653      	mov	r3, sl
 8003b60:	4632      	mov	r2, r6
 8003b62:	4621      	mov	r1, r4
 8003b64:	4640      	mov	r0, r8
 8003b66:	f7ff ff71 	bl	8003a4c <__ssputs_r>
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f000 80a4 	beq.w	8003cb8 <_svfiprintf_r+0x1b8>
 8003b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b72:	4453      	add	r3, sl
 8003b74:	9309      	str	r3, [sp, #36]	; 0x24
 8003b76:	783b      	ldrb	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 809d 	beq.w	8003cb8 <_svfiprintf_r+0x1b8>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	9307      	str	r3, [sp, #28]
 8003b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b90:	931a      	str	r3, [sp, #104]	; 0x68
 8003b92:	462f      	mov	r7, r5
 8003b94:	2205      	movs	r2, #5
 8003b96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b9a:	4850      	ldr	r0, [pc, #320]	; (8003cdc <_svfiprintf_r+0x1dc>)
 8003b9c:	f7fc fb28 	bl	80001f0 <memchr>
 8003ba0:	9b04      	ldr	r3, [sp, #16]
 8003ba2:	b9d0      	cbnz	r0, 8003bda <_svfiprintf_r+0xda>
 8003ba4:	06d9      	lsls	r1, r3, #27
 8003ba6:	bf44      	itt	mi
 8003ba8:	2220      	movmi	r2, #32
 8003baa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bae:	071a      	lsls	r2, r3, #28
 8003bb0:	bf44      	itt	mi
 8003bb2:	222b      	movmi	r2, #43	; 0x2b
 8003bb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bb8:	782a      	ldrb	r2, [r5, #0]
 8003bba:	2a2a      	cmp	r2, #42	; 0x2a
 8003bbc:	d015      	beq.n	8003bea <_svfiprintf_r+0xea>
 8003bbe:	9a07      	ldr	r2, [sp, #28]
 8003bc0:	462f      	mov	r7, r5
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	250a      	movs	r5, #10
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bcc:	3b30      	subs	r3, #48	; 0x30
 8003bce:	2b09      	cmp	r3, #9
 8003bd0:	d94d      	bls.n	8003c6e <_svfiprintf_r+0x16e>
 8003bd2:	b1b8      	cbz	r0, 8003c04 <_svfiprintf_r+0x104>
 8003bd4:	e00f      	b.n	8003bf6 <_svfiprintf_r+0xf6>
 8003bd6:	462f      	mov	r7, r5
 8003bd8:	e7b8      	b.n	8003b4c <_svfiprintf_r+0x4c>
 8003bda:	4a40      	ldr	r2, [pc, #256]	; (8003cdc <_svfiprintf_r+0x1dc>)
 8003bdc:	1a80      	subs	r0, r0, r2
 8003bde:	fa0b f000 	lsl.w	r0, fp, r0
 8003be2:	4318      	orrs	r0, r3
 8003be4:	9004      	str	r0, [sp, #16]
 8003be6:	463d      	mov	r5, r7
 8003be8:	e7d3      	b.n	8003b92 <_svfiprintf_r+0x92>
 8003bea:	9a03      	ldr	r2, [sp, #12]
 8003bec:	1d11      	adds	r1, r2, #4
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	9103      	str	r1, [sp, #12]
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	db01      	blt.n	8003bfa <_svfiprintf_r+0xfa>
 8003bf6:	9207      	str	r2, [sp, #28]
 8003bf8:	e004      	b.n	8003c04 <_svfiprintf_r+0x104>
 8003bfa:	4252      	negs	r2, r2
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	9207      	str	r2, [sp, #28]
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	783b      	ldrb	r3, [r7, #0]
 8003c06:	2b2e      	cmp	r3, #46	; 0x2e
 8003c08:	d10c      	bne.n	8003c24 <_svfiprintf_r+0x124>
 8003c0a:	787b      	ldrb	r3, [r7, #1]
 8003c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c0e:	d133      	bne.n	8003c78 <_svfiprintf_r+0x178>
 8003c10:	9b03      	ldr	r3, [sp, #12]
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	9203      	str	r2, [sp, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bfb8      	it	lt
 8003c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c20:	3702      	adds	r7, #2
 8003c22:	9305      	str	r3, [sp, #20]
 8003c24:	4d2e      	ldr	r5, [pc, #184]	; (8003ce0 <_svfiprintf_r+0x1e0>)
 8003c26:	7839      	ldrb	r1, [r7, #0]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f7fc fae0 	bl	80001f0 <memchr>
 8003c30:	b138      	cbz	r0, 8003c42 <_svfiprintf_r+0x142>
 8003c32:	2340      	movs	r3, #64	; 0x40
 8003c34:	1b40      	subs	r0, r0, r5
 8003c36:	fa03 f000 	lsl.w	r0, r3, r0
 8003c3a:	9b04      	ldr	r3, [sp, #16]
 8003c3c:	4303      	orrs	r3, r0
 8003c3e:	3701      	adds	r7, #1
 8003c40:	9304      	str	r3, [sp, #16]
 8003c42:	7839      	ldrb	r1, [r7, #0]
 8003c44:	4827      	ldr	r0, [pc, #156]	; (8003ce4 <_svfiprintf_r+0x1e4>)
 8003c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c4a:	2206      	movs	r2, #6
 8003c4c:	1c7e      	adds	r6, r7, #1
 8003c4e:	f7fc facf 	bl	80001f0 <memchr>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d038      	beq.n	8003cc8 <_svfiprintf_r+0x1c8>
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <_svfiprintf_r+0x1e8>)
 8003c58:	bb13      	cbnz	r3, 8003ca0 <_svfiprintf_r+0x1a0>
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	3307      	adds	r3, #7
 8003c5e:	f023 0307 	bic.w	r3, r3, #7
 8003c62:	3308      	adds	r3, #8
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c68:	444b      	add	r3, r9
 8003c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6c:	e76d      	b.n	8003b4a <_svfiprintf_r+0x4a>
 8003c6e:	fb05 3202 	mla	r2, r5, r2, r3
 8003c72:	2001      	movs	r0, #1
 8003c74:	460f      	mov	r7, r1
 8003c76:	e7a6      	b.n	8003bc6 <_svfiprintf_r+0xc6>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	3701      	adds	r7, #1
 8003c7c:	9305      	str	r3, [sp, #20]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	250a      	movs	r5, #10
 8003c82:	4638      	mov	r0, r7
 8003c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c88:	3a30      	subs	r2, #48	; 0x30
 8003c8a:	2a09      	cmp	r2, #9
 8003c8c:	d903      	bls.n	8003c96 <_svfiprintf_r+0x196>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0c8      	beq.n	8003c24 <_svfiprintf_r+0x124>
 8003c92:	9105      	str	r1, [sp, #20]
 8003c94:	e7c6      	b.n	8003c24 <_svfiprintf_r+0x124>
 8003c96:	fb05 2101 	mla	r1, r5, r1, r2
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	e7f0      	b.n	8003c82 <_svfiprintf_r+0x182>
 8003ca0:	ab03      	add	r3, sp, #12
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <_svfiprintf_r+0x1ec>)
 8003ca8:	a904      	add	r1, sp, #16
 8003caa:	4640      	mov	r0, r8
 8003cac:	f3af 8000 	nop.w
 8003cb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003cb4:	4681      	mov	r9, r0
 8003cb6:	d1d6      	bne.n	8003c66 <_svfiprintf_r+0x166>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	065b      	lsls	r3, r3, #25
 8003cbc:	f53f af35 	bmi.w	8003b2a <_svfiprintf_r+0x2a>
 8003cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cc2:	b01d      	add	sp, #116	; 0x74
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc8:	ab03      	add	r3, sp, #12
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4622      	mov	r2, r4
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <_svfiprintf_r+0x1ec>)
 8003cd0:	a904      	add	r1, sp, #16
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	f000 f882 	bl	8003ddc <_printf_i>
 8003cd8:	e7ea      	b.n	8003cb0 <_svfiprintf_r+0x1b0>
 8003cda:	bf00      	nop
 8003cdc:	08004298 	.word	0x08004298
 8003ce0:	0800429e 	.word	0x0800429e
 8003ce4:	080042a2 	.word	0x080042a2
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	08003a4d 	.word	0x08003a4d

08003cf0 <_printf_common>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	4691      	mov	r9, r2
 8003cf6:	461f      	mov	r7, r3
 8003cf8:	688a      	ldr	r2, [r1, #8]
 8003cfa:	690b      	ldr	r3, [r1, #16]
 8003cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	bfb8      	it	lt
 8003d04:	4613      	movlt	r3, r2
 8003d06:	f8c9 3000 	str.w	r3, [r9]
 8003d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	b112      	cbz	r2, 8003d1a <_printf_common+0x2a>
 8003d14:	3301      	adds	r3, #1
 8003d16:	f8c9 3000 	str.w	r3, [r9]
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	0699      	lsls	r1, r3, #26
 8003d1e:	bf42      	ittt	mi
 8003d20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d24:	3302      	addmi	r3, #2
 8003d26:	f8c9 3000 	strmi.w	r3, [r9]
 8003d2a:	6825      	ldr	r5, [r4, #0]
 8003d2c:	f015 0506 	ands.w	r5, r5, #6
 8003d30:	d107      	bne.n	8003d42 <_printf_common+0x52>
 8003d32:	f104 0a19 	add.w	sl, r4, #25
 8003d36:	68e3      	ldr	r3, [r4, #12]
 8003d38:	f8d9 2000 	ldr.w	r2, [r9]
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	42ab      	cmp	r3, r5
 8003d40:	dc28      	bgt.n	8003d94 <_printf_common+0xa4>
 8003d42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	3300      	adds	r3, #0
 8003d4a:	bf18      	it	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	0692      	lsls	r2, r2, #26
 8003d50:	d42d      	bmi.n	8003dae <_printf_common+0xbe>
 8003d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d56:	4639      	mov	r1, r7
 8003d58:	4630      	mov	r0, r6
 8003d5a:	47c0      	blx	r8
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d020      	beq.n	8003da2 <_printf_common+0xb2>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	68e5      	ldr	r5, [r4, #12]
 8003d64:	f8d9 2000 	ldr.w	r2, [r9]
 8003d68:	f003 0306 	and.w	r3, r3, #6
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	bf08      	it	eq
 8003d70:	1aad      	subeq	r5, r5, r2
 8003d72:	68a3      	ldr	r3, [r4, #8]
 8003d74:	6922      	ldr	r2, [r4, #16]
 8003d76:	bf0c      	ite	eq
 8003d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d7c:	2500      	movne	r5, #0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	bfc4      	itt	gt
 8003d82:	1a9b      	subgt	r3, r3, r2
 8003d84:	18ed      	addgt	r5, r5, r3
 8003d86:	f04f 0900 	mov.w	r9, #0
 8003d8a:	341a      	adds	r4, #26
 8003d8c:	454d      	cmp	r5, r9
 8003d8e:	d11a      	bne.n	8003dc6 <_printf_common+0xd6>
 8003d90:	2000      	movs	r0, #0
 8003d92:	e008      	b.n	8003da6 <_printf_common+0xb6>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4652      	mov	r2, sl
 8003d98:	4639      	mov	r1, r7
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	47c0      	blx	r8
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d103      	bne.n	8003daa <_printf_common+0xba>
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003daa:	3501      	adds	r5, #1
 8003dac:	e7c3      	b.n	8003d36 <_printf_common+0x46>
 8003dae:	18e1      	adds	r1, r4, r3
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	2030      	movs	r0, #48	; 0x30
 8003db4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003db8:	4422      	add	r2, r4
 8003dba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	e7c5      	b.n	8003d52 <_printf_common+0x62>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4622      	mov	r2, r4
 8003dca:	4639      	mov	r1, r7
 8003dcc:	4630      	mov	r0, r6
 8003dce:	47c0      	blx	r8
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d0e6      	beq.n	8003da2 <_printf_common+0xb2>
 8003dd4:	f109 0901 	add.w	r9, r9, #1
 8003dd8:	e7d8      	b.n	8003d8c <_printf_common+0x9c>
	...

08003ddc <_printf_i>:
 8003ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003de0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003de4:	460c      	mov	r4, r1
 8003de6:	7e09      	ldrb	r1, [r1, #24]
 8003de8:	b085      	sub	sp, #20
 8003dea:	296e      	cmp	r1, #110	; 0x6e
 8003dec:	4617      	mov	r7, r2
 8003dee:	4606      	mov	r6, r0
 8003df0:	4698      	mov	r8, r3
 8003df2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003df4:	f000 80b3 	beq.w	8003f5e <_printf_i+0x182>
 8003df8:	d822      	bhi.n	8003e40 <_printf_i+0x64>
 8003dfa:	2963      	cmp	r1, #99	; 0x63
 8003dfc:	d036      	beq.n	8003e6c <_printf_i+0x90>
 8003dfe:	d80a      	bhi.n	8003e16 <_printf_i+0x3a>
 8003e00:	2900      	cmp	r1, #0
 8003e02:	f000 80b9 	beq.w	8003f78 <_printf_i+0x19c>
 8003e06:	2958      	cmp	r1, #88	; 0x58
 8003e08:	f000 8083 	beq.w	8003f12 <_printf_i+0x136>
 8003e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e14:	e032      	b.n	8003e7c <_printf_i+0xa0>
 8003e16:	2964      	cmp	r1, #100	; 0x64
 8003e18:	d001      	beq.n	8003e1e <_printf_i+0x42>
 8003e1a:	2969      	cmp	r1, #105	; 0x69
 8003e1c:	d1f6      	bne.n	8003e0c <_printf_i+0x30>
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	0605      	lsls	r5, r0, #24
 8003e24:	f103 0104 	add.w	r1, r3, #4
 8003e28:	d52a      	bpl.n	8003e80 <_printf_i+0xa4>
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6011      	str	r1, [r2, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da03      	bge.n	8003e3a <_printf_i+0x5e>
 8003e32:	222d      	movs	r2, #45	; 0x2d
 8003e34:	425b      	negs	r3, r3
 8003e36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e3a:	486f      	ldr	r0, [pc, #444]	; (8003ff8 <_printf_i+0x21c>)
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	e039      	b.n	8003eb4 <_printf_i+0xd8>
 8003e40:	2973      	cmp	r1, #115	; 0x73
 8003e42:	f000 809d 	beq.w	8003f80 <_printf_i+0x1a4>
 8003e46:	d808      	bhi.n	8003e5a <_printf_i+0x7e>
 8003e48:	296f      	cmp	r1, #111	; 0x6f
 8003e4a:	d020      	beq.n	8003e8e <_printf_i+0xb2>
 8003e4c:	2970      	cmp	r1, #112	; 0x70
 8003e4e:	d1dd      	bne.n	8003e0c <_printf_i+0x30>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f043 0320 	orr.w	r3, r3, #32
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	e003      	b.n	8003e62 <_printf_i+0x86>
 8003e5a:	2975      	cmp	r1, #117	; 0x75
 8003e5c:	d017      	beq.n	8003e8e <_printf_i+0xb2>
 8003e5e:	2978      	cmp	r1, #120	; 0x78
 8003e60:	d1d4      	bne.n	8003e0c <_printf_i+0x30>
 8003e62:	2378      	movs	r3, #120	; 0x78
 8003e64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e68:	4864      	ldr	r0, [pc, #400]	; (8003ffc <_printf_i+0x220>)
 8003e6a:	e055      	b.n	8003f18 <_printf_i+0x13c>
 8003e6c:	6813      	ldr	r3, [r2, #0]
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6011      	str	r1, [r2, #0]
 8003e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e08c      	b.n	8003f9a <_printf_i+0x1be>
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6011      	str	r1, [r2, #0]
 8003e84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e88:	bf18      	it	ne
 8003e8a:	b21b      	sxthne	r3, r3
 8003e8c:	e7cf      	b.n	8003e2e <_printf_i+0x52>
 8003e8e:	6813      	ldr	r3, [r2, #0]
 8003e90:	6825      	ldr	r5, [r4, #0]
 8003e92:	1d18      	adds	r0, r3, #4
 8003e94:	6010      	str	r0, [r2, #0]
 8003e96:	0628      	lsls	r0, r5, #24
 8003e98:	d501      	bpl.n	8003e9e <_printf_i+0xc2>
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	e002      	b.n	8003ea4 <_printf_i+0xc8>
 8003e9e:	0668      	lsls	r0, r5, #25
 8003ea0:	d5fb      	bpl.n	8003e9a <_printf_i+0xbe>
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	4854      	ldr	r0, [pc, #336]	; (8003ff8 <_printf_i+0x21c>)
 8003ea6:	296f      	cmp	r1, #111	; 0x6f
 8003ea8:	bf14      	ite	ne
 8003eaa:	220a      	movne	r2, #10
 8003eac:	2208      	moveq	r2, #8
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eb4:	6865      	ldr	r5, [r4, #4]
 8003eb6:	60a5      	str	r5, [r4, #8]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	f2c0 8095 	blt.w	8003fe8 <_printf_i+0x20c>
 8003ebe:	6821      	ldr	r1, [r4, #0]
 8003ec0:	f021 0104 	bic.w	r1, r1, #4
 8003ec4:	6021      	str	r1, [r4, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d13d      	bne.n	8003f46 <_printf_i+0x16a>
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	f040 808e 	bne.w	8003fec <_printf_i+0x210>
 8003ed0:	4665      	mov	r5, ip
 8003ed2:	2a08      	cmp	r2, #8
 8003ed4:	d10b      	bne.n	8003eee <_printf_i+0x112>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	07db      	lsls	r3, r3, #31
 8003eda:	d508      	bpl.n	8003eee <_printf_i+0x112>
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	6862      	ldr	r2, [r4, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	bfde      	ittt	le
 8003ee4:	2330      	movle	r3, #48	; 0x30
 8003ee6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003eee:	ebac 0305 	sub.w	r3, ip, r5
 8003ef2:	6123      	str	r3, [r4, #16]
 8003ef4:	f8cd 8000 	str.w	r8, [sp]
 8003ef8:	463b      	mov	r3, r7
 8003efa:	aa03      	add	r2, sp, #12
 8003efc:	4621      	mov	r1, r4
 8003efe:	4630      	mov	r0, r6
 8003f00:	f7ff fef6 	bl	8003cf0 <_printf_common>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d14d      	bne.n	8003fa4 <_printf_i+0x1c8>
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	b005      	add	sp, #20
 8003f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f12:	4839      	ldr	r0, [pc, #228]	; (8003ff8 <_printf_i+0x21c>)
 8003f14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	6821      	ldr	r1, [r4, #0]
 8003f1c:	1d1d      	adds	r5, r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6015      	str	r5, [r2, #0]
 8003f22:	060a      	lsls	r2, r1, #24
 8003f24:	d50b      	bpl.n	8003f3e <_printf_i+0x162>
 8003f26:	07ca      	lsls	r2, r1, #31
 8003f28:	bf44      	itt	mi
 8003f2a:	f041 0120 	orrmi.w	r1, r1, #32
 8003f2e:	6021      	strmi	r1, [r4, #0]
 8003f30:	b91b      	cbnz	r3, 8003f3a <_printf_i+0x15e>
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	f022 0220 	bic.w	r2, r2, #32
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	e7b7      	b.n	8003eae <_printf_i+0xd2>
 8003f3e:	064d      	lsls	r5, r1, #25
 8003f40:	bf48      	it	mi
 8003f42:	b29b      	uxthmi	r3, r3
 8003f44:	e7ef      	b.n	8003f26 <_printf_i+0x14a>
 8003f46:	4665      	mov	r5, ip
 8003f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f4c:	fb02 3311 	mls	r3, r2, r1, r3
 8003f50:	5cc3      	ldrb	r3, [r0, r3]
 8003f52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f56:	460b      	mov	r3, r1
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	d1f5      	bne.n	8003f48 <_printf_i+0x16c>
 8003f5c:	e7b9      	b.n	8003ed2 <_printf_i+0xf6>
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	6825      	ldr	r5, [r4, #0]
 8003f62:	6961      	ldr	r1, [r4, #20]
 8003f64:	1d18      	adds	r0, r3, #4
 8003f66:	6010      	str	r0, [r2, #0]
 8003f68:	0628      	lsls	r0, r5, #24
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	d501      	bpl.n	8003f72 <_printf_i+0x196>
 8003f6e:	6019      	str	r1, [r3, #0]
 8003f70:	e002      	b.n	8003f78 <_printf_i+0x19c>
 8003f72:	066a      	lsls	r2, r5, #25
 8003f74:	d5fb      	bpl.n	8003f6e <_printf_i+0x192>
 8003f76:	8019      	strh	r1, [r3, #0]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6123      	str	r3, [r4, #16]
 8003f7c:	4665      	mov	r5, ip
 8003f7e:	e7b9      	b.n	8003ef4 <_printf_i+0x118>
 8003f80:	6813      	ldr	r3, [r2, #0]
 8003f82:	1d19      	adds	r1, r3, #4
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	681d      	ldr	r5, [r3, #0]
 8003f88:	6862      	ldr	r2, [r4, #4]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f7fc f92f 	bl	80001f0 <memchr>
 8003f92:	b108      	cbz	r0, 8003f98 <_printf_i+0x1bc>
 8003f94:	1b40      	subs	r0, r0, r5
 8003f96:	6060      	str	r0, [r4, #4]
 8003f98:	6863      	ldr	r3, [r4, #4]
 8003f9a:	6123      	str	r3, [r4, #16]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa2:	e7a7      	b.n	8003ef4 <_printf_i+0x118>
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	4639      	mov	r1, r7
 8003faa:	4630      	mov	r0, r6
 8003fac:	47c0      	blx	r8
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d0aa      	beq.n	8003f08 <_printf_i+0x12c>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	079b      	lsls	r3, r3, #30
 8003fb6:	d413      	bmi.n	8003fe0 <_printf_i+0x204>
 8003fb8:	68e0      	ldr	r0, [r4, #12]
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	4298      	cmp	r0, r3
 8003fbe:	bfb8      	it	lt
 8003fc0:	4618      	movlt	r0, r3
 8003fc2:	e7a3      	b.n	8003f0c <_printf_i+0x130>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	464a      	mov	r2, r9
 8003fc8:	4639      	mov	r1, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	47c0      	blx	r8
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d09a      	beq.n	8003f08 <_printf_i+0x12c>
 8003fd2:	3501      	adds	r5, #1
 8003fd4:	68e3      	ldr	r3, [r4, #12]
 8003fd6:	9a03      	ldr	r2, [sp, #12]
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	42ab      	cmp	r3, r5
 8003fdc:	dcf2      	bgt.n	8003fc4 <_printf_i+0x1e8>
 8003fde:	e7eb      	b.n	8003fb8 <_printf_i+0x1dc>
 8003fe0:	2500      	movs	r5, #0
 8003fe2:	f104 0919 	add.w	r9, r4, #25
 8003fe6:	e7f5      	b.n	8003fd4 <_printf_i+0x1f8>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ac      	bne.n	8003f46 <_printf_i+0x16a>
 8003fec:	7803      	ldrb	r3, [r0, #0]
 8003fee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff6:	e76c      	b.n	8003ed2 <_printf_i+0xf6>
 8003ff8:	080042a9 	.word	0x080042a9
 8003ffc:	080042ba 	.word	0x080042ba

08004000 <memcpy>:
 8004000:	b510      	push	{r4, lr}
 8004002:	1e43      	subs	r3, r0, #1
 8004004:	440a      	add	r2, r1
 8004006:	4291      	cmp	r1, r2
 8004008:	d100      	bne.n	800400c <memcpy+0xc>
 800400a:	bd10      	pop	{r4, pc}
 800400c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004010:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004014:	e7f7      	b.n	8004006 <memcpy+0x6>

08004016 <memmove>:
 8004016:	4288      	cmp	r0, r1
 8004018:	b510      	push	{r4, lr}
 800401a:	eb01 0302 	add.w	r3, r1, r2
 800401e:	d807      	bhi.n	8004030 <memmove+0x1a>
 8004020:	1e42      	subs	r2, r0, #1
 8004022:	4299      	cmp	r1, r3
 8004024:	d00a      	beq.n	800403c <memmove+0x26>
 8004026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800402a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800402e:	e7f8      	b.n	8004022 <memmove+0xc>
 8004030:	4283      	cmp	r3, r0
 8004032:	d9f5      	bls.n	8004020 <memmove+0xa>
 8004034:	1881      	adds	r1, r0, r2
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	42d3      	cmn	r3, r2
 800403a:	d100      	bne.n	800403e <memmove+0x28>
 800403c:	bd10      	pop	{r4, pc}
 800403e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004042:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004046:	e7f7      	b.n	8004038 <memmove+0x22>

08004048 <_free_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4605      	mov	r5, r0
 800404c:	2900      	cmp	r1, #0
 800404e:	d045      	beq.n	80040dc <_free_r+0x94>
 8004050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004054:	1f0c      	subs	r4, r1, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfb8      	it	lt
 800405a:	18e4      	addlt	r4, r4, r3
 800405c:	f000 f8d2 	bl	8004204 <__malloc_lock>
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <_free_r+0x98>)
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	4610      	mov	r0, r2
 8004066:	b933      	cbnz	r3, 8004076 <_free_r+0x2e>
 8004068:	6063      	str	r3, [r4, #4]
 800406a:	6014      	str	r4, [r2, #0]
 800406c:	4628      	mov	r0, r5
 800406e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004072:	f000 b8c8 	b.w	8004206 <__malloc_unlock>
 8004076:	42a3      	cmp	r3, r4
 8004078:	d90c      	bls.n	8004094 <_free_r+0x4c>
 800407a:	6821      	ldr	r1, [r4, #0]
 800407c:	1862      	adds	r2, r4, r1
 800407e:	4293      	cmp	r3, r2
 8004080:	bf04      	itt	eq
 8004082:	681a      	ldreq	r2, [r3, #0]
 8004084:	685b      	ldreq	r3, [r3, #4]
 8004086:	6063      	str	r3, [r4, #4]
 8004088:	bf04      	itt	eq
 800408a:	1852      	addeq	r2, r2, r1
 800408c:	6022      	streq	r2, [r4, #0]
 800408e:	6004      	str	r4, [r0, #0]
 8004090:	e7ec      	b.n	800406c <_free_r+0x24>
 8004092:	4613      	mov	r3, r2
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	b10a      	cbz	r2, 800409c <_free_r+0x54>
 8004098:	42a2      	cmp	r2, r4
 800409a:	d9fa      	bls.n	8004092 <_free_r+0x4a>
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	1858      	adds	r0, r3, r1
 80040a0:	42a0      	cmp	r0, r4
 80040a2:	d10b      	bne.n	80040bc <_free_r+0x74>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	4401      	add	r1, r0
 80040a8:	1858      	adds	r0, r3, r1
 80040aa:	4282      	cmp	r2, r0
 80040ac:	6019      	str	r1, [r3, #0]
 80040ae:	d1dd      	bne.n	800406c <_free_r+0x24>
 80040b0:	6810      	ldr	r0, [r2, #0]
 80040b2:	6852      	ldr	r2, [r2, #4]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	4401      	add	r1, r0
 80040b8:	6019      	str	r1, [r3, #0]
 80040ba:	e7d7      	b.n	800406c <_free_r+0x24>
 80040bc:	d902      	bls.n	80040c4 <_free_r+0x7c>
 80040be:	230c      	movs	r3, #12
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	e7d3      	b.n	800406c <_free_r+0x24>
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	1821      	adds	r1, r4, r0
 80040c8:	428a      	cmp	r2, r1
 80040ca:	bf04      	itt	eq
 80040cc:	6811      	ldreq	r1, [r2, #0]
 80040ce:	6852      	ldreq	r2, [r2, #4]
 80040d0:	6062      	str	r2, [r4, #4]
 80040d2:	bf04      	itt	eq
 80040d4:	1809      	addeq	r1, r1, r0
 80040d6:	6021      	streq	r1, [r4, #0]
 80040d8:	605c      	str	r4, [r3, #4]
 80040da:	e7c7      	b.n	800406c <_free_r+0x24>
 80040dc:	bd38      	pop	{r3, r4, r5, pc}
 80040de:	bf00      	nop
 80040e0:	20000090 	.word	0x20000090

080040e4 <_malloc_r>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	1ccd      	adds	r5, r1, #3
 80040e8:	f025 0503 	bic.w	r5, r5, #3
 80040ec:	3508      	adds	r5, #8
 80040ee:	2d0c      	cmp	r5, #12
 80040f0:	bf38      	it	cc
 80040f2:	250c      	movcc	r5, #12
 80040f4:	2d00      	cmp	r5, #0
 80040f6:	4606      	mov	r6, r0
 80040f8:	db01      	blt.n	80040fe <_malloc_r+0x1a>
 80040fa:	42a9      	cmp	r1, r5
 80040fc:	d903      	bls.n	8004106 <_malloc_r+0x22>
 80040fe:	230c      	movs	r3, #12
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	2000      	movs	r0, #0
 8004104:	bd70      	pop	{r4, r5, r6, pc}
 8004106:	f000 f87d 	bl	8004204 <__malloc_lock>
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <_malloc_r+0xac>)
 800410c:	6814      	ldr	r4, [r2, #0]
 800410e:	4621      	mov	r1, r4
 8004110:	b991      	cbnz	r1, 8004138 <_malloc_r+0x54>
 8004112:	4c20      	ldr	r4, [pc, #128]	; (8004194 <_malloc_r+0xb0>)
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	b91b      	cbnz	r3, 8004120 <_malloc_r+0x3c>
 8004118:	4630      	mov	r0, r6
 800411a:	f000 f863 	bl	80041e4 <_sbrk_r>
 800411e:	6020      	str	r0, [r4, #0]
 8004120:	4629      	mov	r1, r5
 8004122:	4630      	mov	r0, r6
 8004124:	f000 f85e 	bl	80041e4 <_sbrk_r>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d124      	bne.n	8004176 <_malloc_r+0x92>
 800412c:	230c      	movs	r3, #12
 800412e:	6033      	str	r3, [r6, #0]
 8004130:	4630      	mov	r0, r6
 8004132:	f000 f868 	bl	8004206 <__malloc_unlock>
 8004136:	e7e4      	b.n	8004102 <_malloc_r+0x1e>
 8004138:	680b      	ldr	r3, [r1, #0]
 800413a:	1b5b      	subs	r3, r3, r5
 800413c:	d418      	bmi.n	8004170 <_malloc_r+0x8c>
 800413e:	2b0b      	cmp	r3, #11
 8004140:	d90f      	bls.n	8004162 <_malloc_r+0x7e>
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	50cd      	str	r5, [r1, r3]
 8004146:	18cc      	adds	r4, r1, r3
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f85c 	bl	8004206 <__malloc_unlock>
 800414e:	f104 000b 	add.w	r0, r4, #11
 8004152:	1d23      	adds	r3, r4, #4
 8004154:	f020 0007 	bic.w	r0, r0, #7
 8004158:	1ac3      	subs	r3, r0, r3
 800415a:	d0d3      	beq.n	8004104 <_malloc_r+0x20>
 800415c:	425a      	negs	r2, r3
 800415e:	50e2      	str	r2, [r4, r3]
 8004160:	e7d0      	b.n	8004104 <_malloc_r+0x20>
 8004162:	428c      	cmp	r4, r1
 8004164:	684b      	ldr	r3, [r1, #4]
 8004166:	bf16      	itet	ne
 8004168:	6063      	strne	r3, [r4, #4]
 800416a:	6013      	streq	r3, [r2, #0]
 800416c:	460c      	movne	r4, r1
 800416e:	e7eb      	b.n	8004148 <_malloc_r+0x64>
 8004170:	460c      	mov	r4, r1
 8004172:	6849      	ldr	r1, [r1, #4]
 8004174:	e7cc      	b.n	8004110 <_malloc_r+0x2c>
 8004176:	1cc4      	adds	r4, r0, #3
 8004178:	f024 0403 	bic.w	r4, r4, #3
 800417c:	42a0      	cmp	r0, r4
 800417e:	d005      	beq.n	800418c <_malloc_r+0xa8>
 8004180:	1a21      	subs	r1, r4, r0
 8004182:	4630      	mov	r0, r6
 8004184:	f000 f82e 	bl	80041e4 <_sbrk_r>
 8004188:	3001      	adds	r0, #1
 800418a:	d0cf      	beq.n	800412c <_malloc_r+0x48>
 800418c:	6025      	str	r5, [r4, #0]
 800418e:	e7db      	b.n	8004148 <_malloc_r+0x64>
 8004190:	20000090 	.word	0x20000090
 8004194:	20000094 	.word	0x20000094

08004198 <_realloc_r>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	4607      	mov	r7, r0
 800419c:	4614      	mov	r4, r2
 800419e:	460e      	mov	r6, r1
 80041a0:	b921      	cbnz	r1, 80041ac <_realloc_r+0x14>
 80041a2:	4611      	mov	r1, r2
 80041a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041a8:	f7ff bf9c 	b.w	80040e4 <_malloc_r>
 80041ac:	b922      	cbnz	r2, 80041b8 <_realloc_r+0x20>
 80041ae:	f7ff ff4b 	bl	8004048 <_free_r>
 80041b2:	4625      	mov	r5, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b8:	f000 f826 	bl	8004208 <_malloc_usable_size_r>
 80041bc:	42a0      	cmp	r0, r4
 80041be:	d20f      	bcs.n	80041e0 <_realloc_r+0x48>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4638      	mov	r0, r7
 80041c4:	f7ff ff8e 	bl	80040e4 <_malloc_r>
 80041c8:	4605      	mov	r5, r0
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d0f2      	beq.n	80041b4 <_realloc_r+0x1c>
 80041ce:	4631      	mov	r1, r6
 80041d0:	4622      	mov	r2, r4
 80041d2:	f7ff ff15 	bl	8004000 <memcpy>
 80041d6:	4631      	mov	r1, r6
 80041d8:	4638      	mov	r0, r7
 80041da:	f7ff ff35 	bl	8004048 <_free_r>
 80041de:	e7e9      	b.n	80041b4 <_realloc_r+0x1c>
 80041e0:	4635      	mov	r5, r6
 80041e2:	e7e7      	b.n	80041b4 <_realloc_r+0x1c>

080041e4 <_sbrk_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4c06      	ldr	r4, [pc, #24]	; (8004200 <_sbrk_r+0x1c>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4605      	mov	r5, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	f7fd fb4c 	bl	800188c <_sbrk>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_sbrk_r+0x1a>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_sbrk_r+0x1a>
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	20000198 	.word	0x20000198

08004204 <__malloc_lock>:
 8004204:	4770      	bx	lr

08004206 <__malloc_unlock>:
 8004206:	4770      	bx	lr

08004208 <_malloc_usable_size_r>:
 8004208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800420c:	1f18      	subs	r0, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	bfbc      	itt	lt
 8004212:	580b      	ldrlt	r3, [r1, r0]
 8004214:	18c0      	addlt	r0, r0, r3
 8004216:	4770      	bx	lr

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
